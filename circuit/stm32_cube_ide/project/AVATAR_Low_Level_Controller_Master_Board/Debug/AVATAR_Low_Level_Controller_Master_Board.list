
AVATAR_Low_Level_Controller_Master_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000602c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e8  080061e8  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  080061e8  080061e8  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061e8  080061e8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e8  080061e8  000071e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061ec  080061ec  000071ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080061f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b8  20000068  08006258  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001520  08006258  00008520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b82  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307d  00000000  00000000  0001bc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0001ec90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eae  00000000  00000000  0001ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b81  00000000  00000000  00020e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014019  00000000  00000000  0003a9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095658  00000000  00000000  0004e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  000e4074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e930c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006124 	.word	0x08006124

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006124 	.word	0x08006124

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000084 	.word	0x20000084
 800017c:	20000124 	.word	0x20000124

08000180 <Calculate_CRC16_UMTS>:
    }
    return crc; // 계산된 CRC 값 반환
}

uint16_t Calculate_CRC16_UMTS(uint8_t *data, uint8_t start_index, uint8_t end_index)
{
 8000180:	b480      	push	{r7}
 8000182:	b087      	sub	sp, #28
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
 800018c:	4613      	mov	r3, r2
 800018e:	70bb      	strb	r3, [r7, #2]
    uint16_t crc = 0x0000;       // 초기 CRC 값
 8000190:	2300      	movs	r3, #0
 8000192:	82fb      	strh	r3, [r7, #22]
    uint16_t polynomial = 0x8005; // 다항식
 8000194:	f248 0305 	movw	r3, #32773	@ 0x8005
 8000198:	81bb      	strh	r3, [r7, #12]

    for (size_t i = start_index; i < end_index + 1; i++) {
 800019a:	78fb      	ldrb	r3, [r7, #3]
 800019c:	613b      	str	r3, [r7, #16]
 800019e:	e024      	b.n	80001ea <Calculate_CRC16_UMTS+0x6a>
        crc ^= (uint16_t)(data[i] << 8); // MSB 위치에 XOR
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	693b      	ldr	r3, [r7, #16]
 80001a4:	4413      	add	r3, r2
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	021b      	lsls	r3, r3, #8
 80001aa:	b29a      	uxth	r2, r3
 80001ac:	8afb      	ldrh	r3, [r7, #22]
 80001ae:	4053      	eors	r3, r2
 80001b0:	82fb      	strh	r3, [r7, #22]

        for (uint8_t bit = 0; bit < 8; bit++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	73fb      	strb	r3, [r7, #15]
 80001b6:	e012      	b.n	80001de <Calculate_CRC16_UMTS+0x5e>
            if (crc & 0x8000) { // MSB가 1인지 확인
 80001b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	da08      	bge.n	80001d2 <Calculate_CRC16_UMTS+0x52>
                crc = (crc << 1) ^ polynomial;
 80001c0:	8afb      	ldrh	r3, [r7, #22]
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	b21a      	sxth	r2, r3
 80001c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80001ca:	4053      	eors	r3, r2
 80001cc:	b21b      	sxth	r3, r3
 80001ce:	82fb      	strh	r3, [r7, #22]
 80001d0:	e002      	b.n	80001d8 <Calculate_CRC16_UMTS+0x58>
            } else {
                crc <<= 1;
 80001d2:	8afb      	ldrh	r3, [r7, #22]
 80001d4:	005b      	lsls	r3, r3, #1
 80001d6:	82fb      	strh	r3, [r7, #22]
        for (uint8_t bit = 0; bit < 8; bit++) {
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	3301      	adds	r3, #1
 80001dc:	73fb      	strb	r3, [r7, #15]
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d9e9      	bls.n	80001b8 <Calculate_CRC16_UMTS+0x38>
    for (size_t i = start_index; i < end_index + 1; i++) {
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	3301      	adds	r3, #1
 80001e8:	613b      	str	r3, [r7, #16]
 80001ea:	78bb      	ldrb	r3, [r7, #2]
 80001ec:	3301      	adds	r3, #1
 80001ee:	461a      	mov	r2, r3
 80001f0:	693b      	ldr	r3, [r7, #16]
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d3d4      	bcc.n	80001a0 <Calculate_CRC16_UMTS+0x20>
        }

        crc &= 0xFFFF; // 16비트로 유지
    }

    return crc;
 80001f6:	8afb      	ldrh	r3, [r7, #22]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	371c      	adds	r7, #28
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr

08000202 <Calculate_Checksum8>:

uint8_t Calculate_Checksum8(uint8_t *data, size_t start_index, size_t end_index)
{
 8000202:	b480      	push	{r7}
 8000204:	b087      	sub	sp, #28
 8000206:	af00      	add	r7, sp, #0
 8000208:	60f8      	str	r0, [r7, #12]
 800020a:	60b9      	str	r1, [r7, #8]
 800020c:	607a      	str	r2, [r7, #4]
    uint32_t checksum = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    for (size_t i = start_index; i < end_index+1; i++) {
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	613b      	str	r3, [r7, #16]
 8000216:	e00a      	b.n	800022e <Calculate_Checksum8+0x2c>
        checksum = checksum + data[i];
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	461a      	mov	r2, r3
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	4413      	add	r3, r2
 8000226:	617b      	str	r3, [r7, #20]
    for (size_t i = start_index; i < end_index+1; i++) {
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	3301      	adds	r3, #1
 800022c:	613b      	str	r3, [r7, #16]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	693a      	ldr	r2, [r7, #16]
 8000234:	429a      	cmp	r2, r3
 8000236:	d3ef      	bcc.n	8000218 <Calculate_Checksum8+0x16>
    }

    return ~(checksum & 0xFF);
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	43db      	mvns	r3, r3
 800023e:	b2db      	uxtb	r3, r3
}
 8000240:	4618      	mov	r0, r3
 8000242:	371c      	adds	r7, #28
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr

0800024a <Find_Header_Index>:

int8_t Find_Header_Index(uint8_t* packet, size_t packet_length, uint8_t* header, size_t header_length)
{
 800024a:	b480      	push	{r7}
 800024c:	b089      	sub	sp, #36	@ 0x24
 800024e:	af00      	add	r7, sp, #0
 8000250:	60f8      	str	r0, [r7, #12]
 8000252:	60b9      	str	r1, [r7, #8]
 8000254:	607a      	str	r2, [r7, #4]
 8000256:	603b      	str	r3, [r7, #0]
    int8_t header_index = -1;
 8000258:	23ff      	movs	r3, #255	@ 0xff
 800025a:	77fb      	strb	r3, [r7, #31]
    
    // Search for the first and second occurrences of 0xFF, 0xFF
    for (size_t i = 0; i < packet_length - header_length; i++) {
 800025c:	2300      	movs	r3, #0
 800025e:	61bb      	str	r3, [r7, #24]
 8000260:	e024      	b.n	80002ac <Find_Header_Index+0x62>
        size_t true_value = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]
        for (size_t j = 0; j < header_length; j++) {
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
 800026a:	e011      	b.n	8000290 <Find_Header_Index+0x46>
            if (packet[i + j] == header[j]) {
 800026c:	69ba      	ldr	r2, [r7, #24]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	4413      	add	r3, r2
 8000272:	68fa      	ldr	r2, [r7, #12]
 8000274:	4413      	add	r3, r2
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	440b      	add	r3, r1
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d102      	bne.n	800028a <Find_Header_Index+0x40>
                true_value++;
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	3301      	adds	r3, #1
 8000288:	617b      	str	r3, [r7, #20]
        for (size_t j = 0; j < header_length; j++) {
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	3301      	adds	r3, #1
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693a      	ldr	r2, [r7, #16]
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d3e9      	bcc.n	800026c <Find_Header_Index+0x22>
            }
        }

        if (true_value == header_length) {
 8000298:	697a      	ldr	r2, [r7, #20]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d102      	bne.n	80002a6 <Find_Header_Index+0x5c>
            header_index = i;
 80002a0:	69bb      	ldr	r3, [r7, #24]
 80002a2:	77fb      	strb	r3, [r7, #31]
            break;
 80002a4:	e008      	b.n	80002b8 <Find_Header_Index+0x6e>
    for (size_t i = 0; i < packet_length - header_length; i++) {
 80002a6:	69bb      	ldr	r3, [r7, #24]
 80002a8:	3301      	adds	r3, #1
 80002aa:	61bb      	str	r3, [r7, #24]
 80002ac:	68ba      	ldr	r2, [r7, #8]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	1ad3      	subs	r3, r2, r3
 80002b2:	69ba      	ldr	r2, [r7, #24]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d3d4      	bcc.n	8000262 <Find_Header_Index+0x18>
        }
    }

    return header_index;
 80002b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3724      	adds	r7, #36	@ 0x24
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <Check_Packet_Matched>:

uint8_t Check_Packet_Matched(uint8_t* packet1, size_t start_index1, uint8_t* packet2, size_t start_index2, size_t length)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b087      	sub	sp, #28
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	60f8      	str	r0, [r7, #12]
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	607a      	str	r2, [r7, #4]
 80002d2:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < length; i++) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e012      	b.n	8000300 <Check_Packet_Matched+0x3a>
        if (packet1[i + start_index1] != packet2[i + start_index2]) {
 80002da:	697a      	ldr	r2, [r7, #20]
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	4413      	add	r3, r2
 80002e4:	781a      	ldrb	r2, [r3, #0]
 80002e6:	6979      	ldr	r1, [r7, #20]
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	440b      	add	r3, r1
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	440b      	add	r3, r1
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d001      	beq.n	80002fa <Check_Packet_Matched+0x34>
            return 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	e007      	b.n	800030a <Check_Packet_Matched+0x44>
    for (size_t i = 0; i < length; i++) {
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	3301      	adds	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	6a3b      	ldr	r3, [r7, #32]
 8000304:	429a      	cmp	r2, r3
 8000306:	d3e8      	bcc.n	80002da <Check_Packet_Matched+0x14>
        }
    }

    return 1;
 8000308:	2301      	movs	r3, #1
}
 800030a:	4618      	mov	r0, r3
 800030c:	371c      	adds	r7, #28
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <Check_Packet_Validity>:

uint8_t Check_Packet_Validity(uint8_t* packet, size_t packet_length, uint8_t byte, uint8_t type)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b087      	sub	sp, #28
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	4611      	mov	r1, r2
 8000320:	461a      	mov	r2, r3
 8000322:	460b      	mov	r3, r1
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	4613      	mov	r3, r2
 8000328:	71bb      	strb	r3, [r7, #6]
    // byte : 유효성 검사에 사용될 패킷 바이트 수
    // type : 0 > checksum, 1 > CRC
    uint8_t result = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	75fb      	strb	r3, [r7, #23]

    // 헤더 + CRC16 바이트 수보다 작으면 오류 반환
    if (packet_length < 6) {
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	2b05      	cmp	r3, #5
 8000332:	d801      	bhi.n	8000338 <Check_Packet_Validity+0x24>
        return result;
 8000334:	7dfb      	ldrb	r3, [r7, #23]
 8000336:	e062      	b.n	80003fe <Check_Packet_Validity+0xea>
    } 

    // 헤더 확인
    uint8_t header[] = {0xFF, 0xFF, 0xFD};
 8000338:	4a33      	ldr	r2, [pc, #204]	@ (8000408 <Check_Packet_Validity+0xf4>)
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	6812      	ldr	r2, [r2, #0]
 8000340:	4611      	mov	r1, r2
 8000342:	8019      	strh	r1, [r3, #0]
 8000344:	3302      	adds	r3, #2
 8000346:	0c12      	lsrs	r2, r2, #16
 8000348:	701a      	strb	r2, [r3, #0]
    int8_t header_index = Find_Header_Index(packet, packet_length, header, sizeof(header));
 800034a:	f107 0210 	add.w	r2, r7, #16
 800034e:	2303      	movs	r3, #3
 8000350:	68b9      	ldr	r1, [r7, #8]
 8000352:	68f8      	ldr	r0, [r7, #12]
 8000354:	f7ff ff79 	bl	800024a <Find_Header_Index>
 8000358:	4603      	mov	r3, r0
 800035a:	75bb      	strb	r3, [r7, #22]
    if (header_index != 0) {
 800035c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <Check_Packet_Validity+0x54>
        return result;
 8000364:	7dfb      	ldrb	r3, [r7, #23]
 8000366:	e04a      	b.n	80003fe <Check_Packet_Validity+0xea>
    }

    if (type == 0) {
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d115      	bne.n	800039a <Check_Packet_Validity+0x86>
        // Checksum
        if (byte == 1){
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d110      	bne.n	8000396 <Check_Packet_Validity+0x82>
            
            // Checksum8
            if (packet[packet_length-1] != Calculate_Checksum8(packet, 0, packet_length-2)) {
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	3b01      	subs	r3, #1
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	4413      	add	r3, r2
 800037c:	781c      	ldrb	r4, [r3, #0]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	3b02      	subs	r3, #2
 8000382:	461a      	mov	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	68f8      	ldr	r0, [r7, #12]
 8000388:	f7ff ff3b 	bl	8000202 <Calculate_Checksum8>
 800038c:	4603      	mov	r3, r0
 800038e:	429c      	cmp	r4, r3
 8000390:	d032      	beq.n	80003f8 <Check_Packet_Validity+0xe4>
                return result;
 8000392:	7dfb      	ldrb	r3, [r7, #23]
 8000394:	e033      	b.n	80003fe <Check_Packet_Validity+0xea>
            }
        }
        else {
            // 오류
            return result;
 8000396:	7dfb      	ldrb	r3, [r7, #23]
 8000398:	e031      	b.n	80003fe <Check_Packet_Validity+0xea>
        }
    }
    else if (type == 1) {
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d129      	bne.n	80003f4 <Check_Packet_Validity+0xe0>
        // CRC
        if (byte == 2) {
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d124      	bne.n	80003f0 <Check_Packet_Validity+0xdc>

            // CRC16
            uint16_t crc16 = Calculate_CRC16_UMTS(packet, 0, packet_length-3);
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	3b03      	subs	r3, #3
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f7ff fee4 	bl	8000180 <Calculate_CRC16_UMTS>
 80003b8:	4603      	mov	r3, r0
 80003ba:	82bb      	strh	r3, [r7, #20]
            if (packet[packet_length-2] != (crc16 & 0xFF)) {
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	3b02      	subs	r3, #2
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	4413      	add	r3, r2
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	461a      	mov	r2, r3
 80003c8:	8abb      	ldrh	r3, [r7, #20]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d001      	beq.n	80003d4 <Check_Packet_Validity+0xc0>
                return result;
 80003d0:	7dfb      	ldrb	r3, [r7, #23]
 80003d2:	e014      	b.n	80003fe <Check_Packet_Validity+0xea>
            }
            if (packet[packet_length-1] != ((crc16 >> 8) & 0xFF)) {
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	4413      	add	r3, r2
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	8abb      	ldrh	r3, [r7, #20]
 80003e2:	0a1b      	lsrs	r3, r3, #8
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d005      	beq.n	80003f8 <Check_Packet_Validity+0xe4>
                return result;
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	e006      	b.n	80003fe <Check_Packet_Validity+0xea>
            }
        }

        else {
            // 오류
            return result;
 80003f0:	7dfb      	ldrb	r3, [r7, #23]
 80003f2:	e004      	b.n	80003fe <Check_Packet_Validity+0xea>
        }
    }
    else {
        // 오류
        return result;
 80003f4:	7dfb      	ldrb	r3, [r7, #23]
 80003f6:	e002      	b.n	80003fe <Check_Packet_Validity+0xea>
    }

    result = 1;
 80003f8:	2301      	movs	r3, #1
 80003fa:	75fb      	strb	r3, [r7, #23]
    return result;
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd90      	pop	{r4, r7, pc}
 8000406:	bf00      	nop
 8000408:	0800613c 	.word	0x0800613c

0800040c <Transmit_MultiByte_Through_CAN>:
#ifdef CAN_ENABLED

// CAN으로는 8바이트 데이터만 송신 가능
// 입력된 데이터를 8바이트로 쪼개서 송신하는 메서드
void Transmit_MultiByte_Through_CAN(CAN_HandleTypeDef* hcan, uint8_t* packet, size_t packet_length)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b090      	sub	sp, #64	@ 0x40
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
    CAN_TxHeaderTypeDef tx_header;
    uint32_t tx_mailbox;
    uint8_t tx_data[8];
    uint16_t offset = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // 송신 헤더 설정
    tx_header.StdId = 0x123;          // 표준 ID
 800041c:	f240 1323 	movw	r3, #291	@ 0x123
 8000420:	623b      	str	r3, [r7, #32]
    tx_header.ExtId = 0x01;           // 확장 ID (사용하지 않음)
 8000422:	2301      	movs	r3, #1
 8000424:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.RTR = CAN_RTR_DATA;     // 데이터 프레임
 8000426:	2300      	movs	r3, #0
 8000428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tx_header.IDE = CAN_ID_STD;       // 표준 ID
 800042a:	2300      	movs	r3, #0
 800042c:	62bb      	str	r3, [r7, #40]	@ 0x28
    tx_header.DLC = 8; // 송신 데이터 바이트
 800042e:	2308      	movs	r3, #8
 8000430:	633b      	str	r3, [r7, #48]	@ 0x30
    tx_header.TransmitGlobalTime = DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    uint8_t count = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t data_size = 6; // 1byte for id, 1byte for checksum
 800043e:	2306      	movs	r3, #6
 8000440:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

    while (offset < packet_length) {
 8000444:	e043      	b.n	80004ce <Transmit_MultiByte_Through_CAN+0xc2>
        // 전송할 데이터 추출 (8바이트씩)
        uint16_t chunk_size = (packet_length - offset > data_size) ? data_size : packet_length - offset;
 8000446:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	1ad2      	subs	r2, r2, r3
 800044c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000450:	4293      	cmp	r3, r2
 8000452:	bf28      	it	cs
 8000454:	4613      	movcs	r3, r2
 8000456:	877b      	strh	r3, [r7, #58]	@ 0x3a

        memset(tx_data, '\0', sizeof(tx_data)); // 나머지 공간 0으로 초기화
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2208      	movs	r2, #8
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f005 fd79 	bl	8005f58 <memset>

        tx_data[0] = count;
 8000466:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800046a:	753b      	strb	r3, [r7, #20]
        memcpy(tx_data + 1, packet + offset, chunk_size);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	3301      	adds	r3, #1
 8000472:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8000474:	68b9      	ldr	r1, [r7, #8]
 8000476:	4411      	add	r1, r2
 8000478:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800047a:	4618      	mov	r0, r3
 800047c:	f005 fdf0 	bl	8006060 <memcpy>
        tx_data[7] = Calculate_Checksum8(tx_data, 0, 6);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	2206      	movs	r2, #6
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff feba 	bl	8000202 <Calculate_Checksum8>
 800048e:	4603      	mov	r3, r0
 8000490:	76fb      	strb	r3, [r7, #27]

         // 현재 송신 데이터 길이

        // HAL_CAN_AddTxMessage(hcan, &txHeader, tx_data, &txMailbox);
        // CAN 송신
        if (HAL_CAN_AddTxMessage(hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	f107 0214 	add.w	r2, r7, #20
 800049a:	f107 0120 	add.w	r1, r7, #32
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	f001 fa8a 	bl	80019b8 <HAL_CAN_AddTxMessage>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d116      	bne.n	80004d8 <Transmit_MultiByte_Through_CAN+0xcc>
            // 송신 실패 처리
            return;
        }

        // 송신 완료 대기
        while (HAL_CAN_IsTxMessagePending(hcan, tx_mailbox));
 80004aa:	bf00      	nop
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	4619      	mov	r1, r3
 80004b0:	68f8      	ldr	r0, [r7, #12]
 80004b2:	f001 fb50 	bl	8001b56 <HAL_CAN_IsTxMessagePending>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1f7      	bne.n	80004ac <Transmit_MultiByte_Through_CAN+0xa0>

        offset += chunk_size; // 다음 데이터로 이동
 80004bc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80004be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80004c0:	4413      	add	r3, r2
 80004c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        count++;
 80004c4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80004c8:	3301      	adds	r3, #1
 80004ca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    while (offset < packet_length) {
 80004ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d8b7      	bhi.n	8000446 <Transmit_MultiByte_Through_CAN+0x3a>
 80004d6:	e000      	b.n	80004da <Transmit_MultiByte_Through_CAN+0xce>
            return;
 80004d8:	bf00      	nop
    }
}
 80004da:	3740      	adds	r7, #64	@ 0x40
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <HAL_SPI_ErrorCallback>:
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

// SPI 에러 이벤트
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    
    // DMA 전송 중단
    HAL_DMA_Abort(hspi->hdmatx);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 f8b5 	bl	800265c <HAL_DMA_Abort>
    HAL_DMA_Abort(hspi->hdmarx);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 f8b0 	bl	800265c <HAL_DMA_Abort>

    // SPI 초기화 해제
    HAL_SPI_DeInit(hspi);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f003 f957 	bl	80037b0 <HAL_SPI_DeInit>

    // SPI 재초기화
    HAL_SPI_Init(hspi);
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f003 f8d0 	bl	80036a8 <HAL_SPI_Init>

    // SPI 통신 시작
    HAL_SPI_TransmitReceive_DMA(hspi, spi_tx_dummy, spi_rx_buffer, SPI_BUFFER_SIZE);
 8000508:	232a      	movs	r3, #42	@ 0x2a
 800050a:	4a04      	ldr	r2, [pc, #16]	@ (800051c <HAL_SPI_ErrorCallback+0x3c>)
 800050c:	4904      	ldr	r1, [pc, #16]	@ (8000520 <HAL_SPI_ErrorCallback+0x40>)
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f003 f976 	bl	8003800 <HAL_SPI_TransmitReceive_DMA>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000350 	.word	0x20000350
 8000520:	200003a8 	.word	0x200003a8

08000524 <HAL_SPI_TxRxCpltCallback>:
volatile uint8_t spi_count_start = 0;
volatile GPIO_PinState spi_slave_respone = GPIO_PIN_SET;

// SPI 수신 이벤트
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI_INSTANCE) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a33      	ldr	r2, [pc, #204]	@ (8000600 <HAL_SPI_TxRxCpltCallback+0xdc>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d132      	bne.n	800059c <HAL_SPI_TxRxCpltCallback+0x78>

        // LED 토글
        if (spi_rx_count == spi_rx_count_interval) {
 8000536:	4b33      	ldr	r3, [pc, #204]	@ (8000604 <HAL_SPI_TxRxCpltCallback+0xe0>)
 8000538:	881a      	ldrh	r2, [r3, #0]
 800053a:	4b33      	ldr	r3, [pc, #204]	@ (8000608 <HAL_SPI_TxRxCpltCallback+0xe4>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	d107      	bne.n	8000552 <HAL_SPI_TxRxCpltCallback+0x2e>
            HAL_GPIO_TogglePin(SPI_LED_GPIO_PORT, SPI_LED_GPIO_PIN);
 8000542:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000546:	4831      	ldr	r0, [pc, #196]	@ (800060c <HAL_SPI_TxRxCpltCallback+0xe8>)
 8000548:	f002 fc67 	bl	8002e1a <HAL_GPIO_TogglePin>
            spi_rx_count = 0;
 800054c:	4b2d      	ldr	r3, [pc, #180]	@ (8000604 <HAL_SPI_TxRxCpltCallback+0xe0>)
 800054e:	2200      	movs	r2, #0
 8000550:	801a      	strh	r2, [r3, #0]
        }
        spi_rx_count = spi_rx_count + 1;
 8000552:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <HAL_SPI_TxRxCpltCallback+0xe0>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	4b2a      	ldr	r3, [pc, #168]	@ (8000604 <HAL_SPI_TxRxCpltCallback+0xe0>)
 800055c:	801a      	strh	r2, [r3, #0]

        // SPI 데이터 버퍼링
        if (spi_rx_buffer_lock == 0) {
 800055e:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <HAL_SPI_TxRxCpltCallback+0xec>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d119      	bne.n	800059c <HAL_SPI_TxRxCpltCallback+0x78>
            spi_rx_buffer_lock = 1;
 8000568:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <HAL_SPI_TxRxCpltCallback+0xec>)
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
            memset(spi_rx_data, '\0', SPI_BUFFER_SIZE);
 800056e:	222a      	movs	r2, #42	@ 0x2a
 8000570:	2100      	movs	r1, #0
 8000572:	4828      	ldr	r0, [pc, #160]	@ (8000614 <HAL_SPI_TxRxCpltCallback+0xf0>)
 8000574:	f005 fcf0 	bl	8005f58 <memset>
            memcpy(spi_rx_data, spi_rx_buffer, SPI_BUFFER_SIZE);
 8000578:	4a26      	ldr	r2, [pc, #152]	@ (8000614 <HAL_SPI_TxRxCpltCallback+0xf0>)
 800057a:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <HAL_SPI_TxRxCpltCallback+0xf4>)
 800057c:	4614      	mov	r4, r2
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	c403      	stmia	r4!, {r0, r1}
 800058e:	8022      	strh	r2, [r4, #0]

            osSignalSet(spiTaskHandle, 0x01);
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <HAL_SPI_TxRxCpltCallback+0xf8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f004 f898 	bl	80046cc <osSignalSet>
        }
    }

    // 슬레이브 보드 준비 완료까지 대기
    while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) != spi_slave_respone);
 800059c:	bf00      	nop
 800059e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a2:	481f      	ldr	r0, [pc, #124]	@ (8000620 <HAL_SPI_TxRxCpltCallback+0xfc>)
 80005a4:	f002 fc0a 	bl	8002dbc <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <HAL_SPI_TxRxCpltCallback+0x100>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d1f3      	bne.n	800059e <HAL_SPI_TxRxCpltCallback+0x7a>
    if (spi_slave_respone == GPIO_PIN_SET) {
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <HAL_SPI_TxRxCpltCallback+0x100>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d103      	bne.n	80005c8 <HAL_SPI_TxRxCpltCallback+0xa4>
        spi_slave_respone = GPIO_PIN_RESET;
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <HAL_SPI_TxRxCpltCallback+0x100>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e002      	b.n	80005ce <HAL_SPI_TxRxCpltCallback+0xaa>
    }
    else {
        spi_slave_respone = GPIO_PIN_SET;
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <HAL_SPI_TxRxCpltCallback+0x100>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
    }

    if (spi_flag == 0) {
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <HAL_SPI_TxRxCpltCallback+0x104>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d109      	bne.n	80005ea <HAL_SPI_TxRxCpltCallback+0xc6>
        // 송신 데이터가 존재할 경우, 데이터 전송
        HAL_SPI_TransmitReceive_DMA(&SPI_PORT, spi_tx_data, spi_rx_buffer, SPI_BUFFER_SIZE);
 80005d6:	232a      	movs	r3, #42	@ 0x2a
 80005d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000618 <HAL_SPI_TxRxCpltCallback+0xf4>)
 80005da:	4914      	ldr	r1, [pc, #80]	@ (800062c <HAL_SPI_TxRxCpltCallback+0x108>)
 80005dc:	4814      	ldr	r0, [pc, #80]	@ (8000630 <HAL_SPI_TxRxCpltCallback+0x10c>)
 80005de:	f003 f90f 	bl	8003800 <HAL_SPI_TransmitReceive_DMA>
        spi_flag = 1;
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <HAL_SPI_TxRxCpltCallback+0x104>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
    }
    else {
        // 송신 데이터가 존재하지 않을 경우, 더미 데이터 전송 (수신을 위함)
        HAL_SPI_TransmitReceive_DMA(&SPI_PORT, spi_tx_dummy, spi_rx_buffer, SPI_BUFFER_SIZE);
    }
}
 80005e8:	e005      	b.n	80005f6 <HAL_SPI_TxRxCpltCallback+0xd2>
        HAL_SPI_TransmitReceive_DMA(&SPI_PORT, spi_tx_dummy, spi_rx_buffer, SPI_BUFFER_SIZE);
 80005ea:	232a      	movs	r3, #42	@ 0x2a
 80005ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <HAL_SPI_TxRxCpltCallback+0xf4>)
 80005ee:	4911      	ldr	r1, [pc, #68]	@ (8000634 <HAL_SPI_TxRxCpltCallback+0x110>)
 80005f0:	480f      	ldr	r0, [pc, #60]	@ (8000630 <HAL_SPI_TxRxCpltCallback+0x10c>)
 80005f2:	f003 f905 	bl	8003800 <HAL_SPI_TransmitReceive_DMA>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bdb0      	pop	{r4, r5, r7, pc}
 80005fe:	bf00      	nop
 8000600:	40003800 	.word	0x40003800
 8000604:	200004ac 	.word	0x200004ac
 8000608:	20000002 	.word	0x20000002
 800060c:	40010800 	.word	0x40010800
 8000610:	200003d2 	.word	0x200003d2
 8000614:	20000324 	.word	0x20000324
 8000618:	20000350 	.word	0x20000350
 800061c:	20000634 	.word	0x20000634
 8000620:	40010c00 	.word	0x40010c00
 8000624:	20000005 	.word	0x20000005
 8000628:	20000000 	.word	0x20000000
 800062c:	2000037c 	.word	0x2000037c
 8000630:	2000050c 	.word	0x2000050c
 8000634:	200003a8 	.word	0x200003a8

08000638 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN 수신 이벤트
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000638:	b5b0      	push	{r4, r5, r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buffer) == HAL_OK) {
 8000640:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000642:	4a31      	ldr	r2, [pc, #196]	@ (8000708 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000644:	2100      	movs	r1, #0
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f001 faa8 	bl	8001b9c <HAL_CAN_GetRxMessage>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d153      	bne.n	80006fa <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>

        // 순번 확인
        if (can_rx_buffer[0] == can_rx_buffer_count) {
 8000652:	4b2c      	ldr	r3, [pc, #176]	@ (8000704 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	429a      	cmp	r2, r3
 800065e:	d122      	bne.n	80006a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
            // 체크섬 검사
            uint8_t checksum = Calculate_Checksum8(can_rx_buffer, 0, 6);
 8000660:	2206      	movs	r2, #6
 8000662:	2100      	movs	r1, #0
 8000664:	4827      	ldr	r0, [pc, #156]	@ (8000704 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000666:	f7ff fdcc 	bl	8000202 <Calculate_Checksum8>
 800066a:	4603      	mov	r3, r0
 800066c:	73fb      	strb	r3, [r7, #15]

            if (checksum == can_rx_buffer[7]) {
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000670:	79db      	ldrb	r3, [r3, #7]
 8000672:	7bfa      	ldrb	r2, [r7, #15]
 8000674:	429a      	cmp	r2, r3
 8000676:	d116      	bne.n	80006a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
                memcpy(can_rx_data_buffer + can_rx_buffer_count * 6, can_rx_buffer + 1, 6);
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	461a      	mov	r2, r3
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800068c:	4413      	add	r3, r2
 800068e:	4921      	ldr	r1, [pc, #132]	@ (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000690:	2206      	movs	r2, #6
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fce4 	bl	8006060 <memcpy>
                can_rx_buffer_count++;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80006a4:	701a      	strb	r2, [r3, #0]
            }
        }

        // 40바이트 : 7개의 8바이트 CAN패킷으로 전송
        if (can_rx_buffer_count == 7) {
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b07      	cmp	r3, #7
 80006ae:	d124      	bne.n	80006fa <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
            if (can_rx_buffer_lock == 0) {
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d119      	bne.n	80006ee <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
                can_rx_buffer_lock = 1;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
                memset(can_rx_data, '\0', SPI_BUFFER_SIZE);
 80006c0:	222a      	movs	r2, #42	@ 0x2a
 80006c2:	2100      	movs	r1, #0
 80006c4:	4815      	ldr	r0, [pc, #84]	@ (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80006c6:	f005 fc47 	bl	8005f58 <memset>
                memcpy(can_rx_data, can_rx_data_buffer, SPI_BUFFER_SIZE);
 80006ca:	4a14      	ldr	r2, [pc, #80]	@ (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80006ce:	4614      	mov	r4, r2
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006de:	c403      	stmia	r4!, {r0, r1}
 80006e0:	8022      	strh	r2, [r4, #0]

                osSignalSet(canRxTaskHandle, 0x01);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2101      	movs	r1, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 ffef 	bl	80046cc <osSignalSet>
            }

            can_rx_buffer_count = 0;
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
            can_rx_timer_count = 0;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	801a      	strh	r2, [r3, #0]
        }
    }
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdb0      	pop	{r4, r5, r7, pc}
 8000702:	bf00      	nop
 8000704:	200003f4 	.word	0x200003f4
 8000708:	200003d4 	.word	0x200003d4
 800070c:	20000453 	.word	0x20000453
 8000710:	200003fc 	.word	0x200003fc
 8000714:	200003f5 	.word	0x200003f5
 8000718:	20000452 	.word	0x20000452
 800071c:	20000428 	.word	0x20000428
 8000720:	20000638 	.word	0x20000638
 8000724:	200003f0 	.word	0x200003f0

08000728 <On_Timer_Tick>:

// 1ms마다 호출되는 메서드
void On_Timer_Tick(TIM_HandleTypeDef *htim)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == CAN_RX_TIMER.Instance) {    
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <On_Timer_Tick+0x98>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d13b      	bne.n	80007b4 <On_Timer_Tick+0x8c>
        can_rx_timer_count++;
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <On_Timer_Tick+0x9c>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <On_Timer_Tick+0x9c>)
 8000748:	801a      	strh	r2, [r3, #0]
        pps_timer_count++;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <On_Timer_Tick+0xa0>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	3301      	adds	r3, #1
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <On_Timer_Tick+0xa0>)
 8000756:	801a      	strh	r2, [r3, #0]
        if (spi_count_start == 1) {
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <On_Timer_Tick+0xa4>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b01      	cmp	r3, #1
 8000760:	d106      	bne.n	8000770 <On_Timer_Tick+0x48>
            spi_delay_tick++;
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <On_Timer_Tick+0xa8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	3301      	adds	r3, #1
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <On_Timer_Tick+0xa8>)
 800076e:	701a      	strb	r2, [r3, #0]
        }

        // CAN 타임아웃 적용
        if (can_rx_timer_count == CAN_RX_TIMEOUT) {
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <On_Timer_Tick+0x9c>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b29b      	uxth	r3, r3
 8000776:	2b64      	cmp	r3, #100	@ 0x64
 8000778:	d105      	bne.n	8000786 <On_Timer_Tick+0x5e>
            can_rx_timer_count = 0;
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <On_Timer_Tick+0x9c>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]
            can_rx_buffer_count = 0;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <On_Timer_Tick+0xac>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
        }

        // 1초마다 PPS 업데이트
        if (pps_timer_count == 1000) { // 1초 주기로 동작
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <On_Timer_Tick+0xa0>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000790:	d110      	bne.n	80007b4 <On_Timer_Tick+0x8c>
            adc_work_count = adc_work_counting_flag;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <On_Timer_Tick+0xb0>)
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <On_Timer_Tick+0xb4>)
 8000798:	801a      	strh	r2, [r3, #0]
            adc_work_counting_flag = 0;
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <On_Timer_Tick+0xb0>)
 800079c:	2200      	movs	r2, #0
 800079e:	801a      	strh	r2, [r3, #0]

            uart_work_count = uart_work_counting_flag;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <On_Timer_Tick+0xb8>)
 80007a2:	881a      	ldrh	r2, [r3, #0]
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <On_Timer_Tick+0xbc>)
 80007a6:	801a      	strh	r2, [r3, #0]
            uart_work_counting_flag = 0;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <On_Timer_Tick+0xb8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	801a      	strh	r2, [r3, #0]

            pps_timer_count = 0;
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <On_Timer_Tick+0xa0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	801a      	strh	r2, [r3, #0]
        }
    }
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200005ec 	.word	0x200005ec
 80007c4:	200003f0 	.word	0x200003f0
 80007c8:	200004ae 	.word	0x200004ae
 80007cc:	200004e3 	.word	0x200004e3
 80007d0:	200004e2 	.word	0x200004e2
 80007d4:	20000453 	.word	0x20000453
 80007d8:	200004b4 	.word	0x200004b4
 80007dc:	200004b6 	.word	0x200004b6
 80007e0:	200004b0 	.word	0x200004b0
 80007e4:	200004b2 	.word	0x200004b2

080007e8 <Start>:

void Start()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
    // CAN 수신 필터 구성
    CAN_FilterTypeDef canFilter;
    canFilter.FilterBank = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
    canFilter.FilterIdHigh = 0x0000;
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
    canFilter.FilterIdLow = 0x0000;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
    canFilter.FilterMaskIdHigh = 0x0000;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
    canFilter.FilterMaskIdLow = 0x0000;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
    canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
    canFilter.FilterActivation = ENABLE;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
    canFilter.SlaveStartFilterBank = 14;
 8000812:	230e      	movs	r3, #14
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24

    // CAN 설정
    HAL_CAN_ConfigFilter(&hcan, &canFilter);
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4811      	ldr	r0, [pc, #68]	@ (8000860 <Start+0x78>)
 800081c:	f000 ffbf 	bl	800179e <HAL_CAN_ConfigFilter>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000820:	2102      	movs	r1, #2
 8000822:	480f      	ldr	r0, [pc, #60]	@ (8000860 <Start+0x78>)
 8000824:	f001 fadb 	bl	8001dde <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan);
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <Start+0x78>)
 800082a:	f001 f881 	bl	8001930 <HAL_CAN_Start>

    // 타이머 시작
    HAL_TIM_Base_Start_IT(&CAN_RX_TIMER);
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <Start+0x7c>)
 8000830:	f003 fb2e 	bl	8003e90 <HAL_TIM_Base_Start_IT>

    // 슬레이브 보드 준비 완료 시 SPI 통신 시작
    while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) != GPIO_PIN_SET);
 8000834:	bf00      	nop
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	480b      	ldr	r0, [pc, #44]	@ (8000868 <Start+0x80>)
 800083c:	f002 fabe 	bl	8002dbc <HAL_GPIO_ReadPin>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	d1f7      	bne.n	8000836 <Start+0x4e>
    spi_slave_respone = GPIO_PIN_RESET;
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <Start+0x84>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&SPI_PORT, spi_tx_dummy, spi_rx_buffer, SPI_BUFFER_SIZE);
 800084c:	232a      	movs	r3, #42	@ 0x2a
 800084e:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <Start+0x88>)
 8000850:	4908      	ldr	r1, [pc, #32]	@ (8000874 <Start+0x8c>)
 8000852:	4809      	ldr	r0, [pc, #36]	@ (8000878 <Start+0x90>)
 8000854:	f002 ffd4 	bl	8003800 <HAL_SPI_TransmitReceive_DMA>
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200004e4 	.word	0x200004e4
 8000864:	200005ec 	.word	0x200005ec
 8000868:	40010c00 	.word	0x40010c00
 800086c:	20000005 	.word	0x20000005
 8000870:	20000350 	.word	0x20000350
 8000874:	200003a8 	.word	0x200003a8
 8000878:	2000050c 	.word	0x2000050c

0800087c <CAN_RX_Callback>:
#define __LOW_LEVEL_CONTROLLER_MASTER_CALLBACKS__

#include "low_level_controller_master_main.h"

void CAN_RX_Callback()
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
    osSignalWait(0x01, osWaitForever);
 8000882:	463b      	mov	r3, r7
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	2101      	movs	r1, #1
 800088a:	4618      	mov	r0, r3
 800088c:	f003 ff5e 	bl	800474c <osSignalWait>

    if (Check_Packet_Validity(can_rx_data, SPI_BUFFER_SIZE, 2, 1) == 1) {
 8000890:	2301      	movs	r3, #1
 8000892:	2202      	movs	r2, #2
 8000894:	212a      	movs	r1, #42	@ 0x2a
 8000896:	4835      	ldr	r0, [pc, #212]	@ (800096c <CAN_RX_Callback+0xf0>)
 8000898:	f7ff fd3c 	bl	8000314 <Check_Packet_Validity>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d15c      	bne.n	800095c <CAN_RX_Callback+0xe0>
        if (spi_flag == 1) {
 80008a2:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <CAN_RX_Callback+0xf4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d153      	bne.n	8000952 <CAN_RX_Callback+0xd6>
            // Master에게 부여된 request인 경우
            if (can_rx_data[5] == 0x05) {
 80008aa:	4b30      	ldr	r3, [pc, #192]	@ (800096c <CAN_RX_Callback+0xf0>)
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d131      	bne.n	8000916 <CAN_RX_Callback+0x9a>
                // 이전 요청에 대한 수신이 완료된 경우에만 송신
                if (on_response_received == 1) {
 80008b2:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <CAN_RX_Callback+0xf8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d14a      	bne.n	8000952 <CAN_RX_Callback+0xd6>
                    on_response_received = 0;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <CAN_RX_Callback+0xf8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
                    memset(requested_data, '\0', SPI_BUFFER_SIZE);
 80008c2:	222a      	movs	r2, #42	@ 0x2a
 80008c4:	2100      	movs	r1, #0
 80008c6:	482c      	ldr	r0, [pc, #176]	@ (8000978 <CAN_RX_Callback+0xfc>)
 80008c8:	f005 fb46 	bl	8005f58 <memset>
                    memcpy(requested_data, can_rx_data + 6, 3);
 80008cc:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <CAN_RX_Callback+0x100>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	4619      	mov	r1, r3
 80008d2:	4829      	ldr	r0, [pc, #164]	@ (8000978 <CAN_RX_Callback+0xfc>)
 80008d4:	f005 fbc4 	bl	8006060 <memcpy>

                    memset(spi_tx_data, '\0', SPI_BUFFER_SIZE);
 80008d8:	222a      	movs	r2, #42	@ 0x2a
 80008da:	2100      	movs	r1, #0
 80008dc:	4828      	ldr	r0, [pc, #160]	@ (8000980 <CAN_RX_Callback+0x104>)
 80008de:	f005 fb3b 	bl	8005f58 <memset>
                    memcpy(spi_tx_data, can_rx_data, SPI_BUFFER_SIZE);
 80008e2:	4a27      	ldr	r2, [pc, #156]	@ (8000980 <CAN_RX_Callback+0x104>)
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <CAN_RX_Callback+0xf0>)
 80008e6:	4614      	mov	r4, r2
 80008e8:	461d      	mov	r5, r3
 80008ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f6:	c403      	stmia	r4!, {r0, r1}
 80008f8:	8022      	strh	r2, [r4, #0]

                    // Checksum 계산
                    spi_tx_data[41] = Calculate_Checksum8(spi_tx_data, 0, 40);
 80008fa:	2228      	movs	r2, #40	@ 0x28
 80008fc:	2100      	movs	r1, #0
 80008fe:	4820      	ldr	r0, [pc, #128]	@ (8000980 <CAN_RX_Callback+0x104>)
 8000900:	f7ff fc7f 	bl	8000202 <Calculate_Checksum8>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <CAN_RX_Callback+0x104>)
 800090a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

                    spi_flag = 0;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <CAN_RX_Callback+0xf4>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e01d      	b.n	8000952 <CAN_RX_Callback+0xd6>
                }
            }
            else {
                memset(spi_tx_data, '\0', SPI_BUFFER_SIZE);
 8000916:	222a      	movs	r2, #42	@ 0x2a
 8000918:	2100      	movs	r1, #0
 800091a:	4819      	ldr	r0, [pc, #100]	@ (8000980 <CAN_RX_Callback+0x104>)
 800091c:	f005 fb1c 	bl	8005f58 <memset>
                memcpy(spi_tx_data, can_rx_data, SPI_BUFFER_SIZE);
 8000920:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <CAN_RX_Callback+0x104>)
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <CAN_RX_Callback+0xf0>)
 8000924:	4614      	mov	r4, r2
 8000926:	461d      	mov	r5, r3
 8000928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000934:	c403      	stmia	r4!, {r0, r1}
 8000936:	8022      	strh	r2, [r4, #0]

                // Checksum 계산
                spi_tx_data[41] = Calculate_Checksum8(spi_tx_data, 0, 40);
 8000938:	2228      	movs	r2, #40	@ 0x28
 800093a:	2100      	movs	r1, #0
 800093c:	4810      	ldr	r0, [pc, #64]	@ (8000980 <CAN_RX_Callback+0x104>)
 800093e:	f7ff fc60 	bl	8000202 <Calculate_Checksum8>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <CAN_RX_Callback+0x104>)
 8000948:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

                spi_flag = 0;
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <CAN_RX_Callback+0xf4>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
            }
        }

        HAL_GPIO_TogglePin(CAN_LED_GPIO_PORT, CAN_LED_GPIO_PIN);
 8000952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000956:	480b      	ldr	r0, [pc, #44]	@ (8000984 <CAN_RX_Callback+0x108>)
 8000958:	f002 fa5f 	bl	8002e1a <HAL_GPIO_TogglePin>
    }

    can_rx_buffer_lock = 0;    
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <CAN_RX_Callback+0x10c>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bdb0      	pop	{r4, r5, r7, pc}
 800096a:	bf00      	nop
 800096c:	20000428 	.word	0x20000428
 8000970:	20000000 	.word	0x20000000
 8000974:	20000004 	.word	0x20000004
 8000978:	200004b8 	.word	0x200004b8
 800097c:	2000042e 	.word	0x2000042e
 8000980:	2000037c 	.word	0x2000037c
 8000984:	40010800 	.word	0x40010800
 8000988:	20000452 	.word	0x20000452

0800098c <Analyze_SPI_Packet>:

uint8_t Analyze_SPI_Packet()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
    uint8_t result = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]

    // Dummy data 확인
    uint32_t sum = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	e00a      	b.n	80009b6 <Analyze_SPI_Packet+0x2a>
        sum += spi_rx_data[i];
 80009a0:	4a26      	ldr	r2, [pc, #152]	@ (8000a3c <Analyze_SPI_Packet+0xb0>)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	2b29      	cmp	r3, #41	@ 0x29
 80009ba:	d9f1      	bls.n	80009a0 <Analyze_SPI_Packet+0x14>
    }
    if (sum == 0) {
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <Analyze_SPI_Packet+0x3a>
        return result;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	e036      	b.n	8000a34 <Analyze_SPI_Packet+0xa8>
    }

    if (Check_Packet_Validity(spi_rx_data, SPI_BUFFER_SIZE, 1, 0) == 0) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	2201      	movs	r2, #1
 80009ca:	212a      	movs	r1, #42	@ 0x2a
 80009cc:	481b      	ldr	r0, [pc, #108]	@ (8000a3c <Analyze_SPI_Packet+0xb0>)
 80009ce:	f7ff fca1 	bl	8000314 <Check_Packet_Validity>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <Analyze_SPI_Packet+0x50>
        return result;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	e02b      	b.n	8000a34 <Analyze_SPI_Packet+0xa8>
    }

    if (spi_rx_data[5] == 0x05) {
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <Analyze_SPI_Packet+0xb0>)
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d10d      	bne.n	8000a00 <Analyze_SPI_Packet+0x74>
        if (Check_Packet_Matched(spi_rx_data, 6, requested_data, 0, 3)) {
 80009e4:	2303      	movs	r3, #3
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	4a15      	ldr	r2, [pc, #84]	@ (8000a40 <Analyze_SPI_Packet+0xb4>)
 80009ec:	2106      	movs	r1, #6
 80009ee:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <Analyze_SPI_Packet+0xb0>)
 80009f0:	f7ff fc69 	bl	80002c6 <Check_Packet_Matched>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <Analyze_SPI_Packet+0x74>
            // Emegency stop 세팅 완료 패킷 수신
            on_response_received = 1;
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <Analyze_SPI_Packet+0xb8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
        }
    }

    // Pacekt count stack
    if ((spi_rx_data[5] & 0b10000000) != 0) {
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <Analyze_SPI_Packet+0xb0>)
 8000a02:	795b      	ldrb	r3, [r3, #5]
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da05      	bge.n	8000a16 <Analyze_SPI_Packet+0x8a>
        uart_work_counting_flag++;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <Analyze_SPI_Packet+0xbc>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <Analyze_SPI_Packet+0xbc>)
 8000a14:	801a      	strh	r2, [r3, #0]
    }
    if ((spi_rx_data[5] & 0b01000000) != 0) {
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <Analyze_SPI_Packet+0xb0>)
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d005      	beq.n	8000a2e <Analyze_SPI_Packet+0xa2>
        adc_work_counting_flag++;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <Analyze_SPI_Packet+0xc0>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <Analyze_SPI_Packet+0xc0>)
 8000a2c:	801a      	strh	r2, [r3, #0]
    }

    result = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
    return result;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000324 	.word	0x20000324
 8000a40:	200004b8 	.word	0x200004b8
 8000a44:	20000004 	.word	0x20000004
 8000a48:	200004b0 	.word	0x200004b0
 8000a4c:	200004b4 	.word	0x200004b4

08000a50 <SPI_Callback>:

volatile uint16_t test_count = 0;

void SPI_Callback()
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
    // SPI 콜백 신호 대기
    osSignalWait(0x01, osWaitForever);
 8000a56:	463b      	mov	r3, r7
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fe74 	bl	800474c <osSignalWait>

    uint8_t result = Analyze_SPI_Packet();
 8000a64:	f7ff ff92 	bl	800098c <Analyze_SPI_Packet>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	75fb      	strb	r3, [r7, #23]
    
    if (can_tx_buffer_lock == 0 && result == 1) {
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <SPI_Callback+0x8c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d12c      	bne.n	8000ad0 <SPI_Callback+0x80>
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d129      	bne.n	8000ad0 <SPI_Callback+0x80>

        // Instruction filtering
        if (spi_rx_data[5] != 0x40 && spi_rx_data[5] != 0x80 && spi_rx_data[5] != 0xC0) {
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <SPI_Callback+0x90>)
 8000a7e:	795b      	ldrb	r3, [r3, #5]
 8000a80:	2b40      	cmp	r3, #64	@ 0x40
 8000a82:	d00b      	beq.n	8000a9c <SPI_Callback+0x4c>
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <SPI_Callback+0x90>)
 8000a86:	795b      	ldrb	r3, [r3, #5]
 8000a88:	2b80      	cmp	r3, #128	@ 0x80
 8000a8a:	d007      	beq.n	8000a9c <SPI_Callback+0x4c>
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <SPI_Callback+0x90>)
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	2bc0      	cmp	r3, #192	@ 0xc0
 8000a92:	d003      	beq.n	8000a9c <SPI_Callback+0x4c>
            spi_rx_buffer_lock = 0;
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <SPI_Callback+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
            return;
 8000a9a:	e01c      	b.n	8000ad6 <SPI_Callback+0x86>
        }

        can_tx_buffer_lock = 1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <SPI_Callback+0x8c>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
        memset(can_tx_data, '\0', SPI_BUFFER_SIZE);
 8000aa2:	222a      	movs	r2, #42	@ 0x2a
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <SPI_Callback+0x98>)
 8000aa8:	f005 fa56 	bl	8005f58 <memset>
        memcpy(can_tx_data, spi_rx_data, SPI_BUFFER_SIZE);
 8000aac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <SPI_Callback+0x98>)
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <SPI_Callback+0x90>)
 8000ab0:	4614      	mov	r4, r2
 8000ab2:	461d      	mov	r5, r3
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000abc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac0:	c403      	stmia	r4!, {r0, r1}
 8000ac2:	8022      	strh	r2, [r4, #0]
        osSignalSet(canTxTaskHandle, 0x01);
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <SPI_Callback+0x9c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 fdfe 	bl	80046cc <osSignalSet>
    }
    
    spi_rx_buffer_lock = 0;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SPI_Callback+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
}
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bdb0      	pop	{r4, r5, r7, pc}
 8000adc:	200004aa 	.word	0x200004aa
 8000ae0:	20000324 	.word	0x20000324
 8000ae4:	200003d2 	.word	0x200003d2
 8000ae8:	20000454 	.word	0x20000454
 8000aec:	2000063c 	.word	0x2000063c

08000af0 <Can_TX_Callback>:

void Can_TX_Callback()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
    osSignalWait(0x01, osWaitForever);
 8000af6:	463b      	mov	r3, r7
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	2101      	movs	r1, #1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fe24 	bl	800474c <osSignalWait>

    // 헤더 설정
    can_tx_buffer[0] = 0xFF;
 8000b04:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b06:	22ff      	movs	r2, #255	@ 0xff
 8000b08:	701a      	strb	r2, [r3, #0]
    can_tx_buffer[1] = 0xFF;
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b0c:	22ff      	movs	r2, #255	@ 0xff
 8000b0e:	705a      	strb	r2, [r3, #1]
    can_tx_buffer[2] = 0xFD;
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b12:	22fd      	movs	r2, #253	@ 0xfd
 8000b14:	709a      	strb	r2, [r3, #2]
    
    // 모터 ID 설정
    can_tx_buffer[3] = can_tx_data[4];
 8000b16:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <Can_TX_Callback+0xcc>)
 8000b18:	791a      	ldrb	r2, [r3, #4]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b1c:	70da      	strb	r2, [r3, #3]
    
    // 컨트롤러 ID 설정
    can_tx_buffer[4] = 0x01;
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	711a      	strb	r2, [r3, #4]

    // Motor position
    can_tx_buffer[5] = 0x01;
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	715a      	strb	r2, [r3, #5]

    // Motor state data
    memcpy(can_tx_buffer + 6, can_tx_data + 6, 10);
 8000b2a:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <Can_TX_Callback+0xd0>)
 8000b2c:	4925      	ldr	r1, [pc, #148]	@ (8000bc4 <Can_TX_Callback+0xd4>)
 8000b2e:	220a      	movs	r2, #10
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 fa95 	bl	8006060 <memcpy>

    // ADC data
    memcpy(can_tx_buffer + 16, can_tx_data + 16, 20);
 8000b36:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <Can_TX_Callback+0xd8>)
 8000b38:	4924      	ldr	r1, [pc, #144]	@ (8000bcc <Can_TX_Callback+0xdc>)
 8000b3a:	2214      	movs	r2, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f005 fa8f 	bl	8006060 <memcpy>

    // PPS
    can_tx_buffer[36] = (uint8_t)(uart_work_count & 0xFF);
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <Can_TX_Callback+0xe0>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    can_tx_buffer[37] = (uint8_t)((uart_work_count >> 8) & 0xFF);
 8000b4e:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <Can_TX_Callback+0xe0>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    can_tx_buffer[38] = (uint8_t)(adc_work_count & 0xFF);
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <Can_TX_Callback+0xe4>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    can_tx_buffer[39] = (uint8_t)((adc_work_count >> 8) & 0xFF);
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <Can_TX_Callback+0xe4>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b76:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

    // CRC
    uint16_t crc16 = Calculate_CRC16_UMTS(can_tx_buffer, 0, 39);
 8000b7a:	2227      	movs	r2, #39	@ 0x27
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480e      	ldr	r0, [pc, #56]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b80:	f7ff fafe 	bl	8000180 <Calculate_CRC16_UMTS>
 8000b84:	4603      	mov	r3, r0
 8000b86:	82fb      	strh	r3, [r7, #22]
    can_tx_buffer[40] = crc16 & 0xFF;        // MSB
 8000b88:	8afb      	ldrh	r3, [r7, #22]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    can_tx_buffer[41] = (crc16 >> 8) & 0xFF; // LSB
 8000b92:	8afb      	ldrh	r3, [r7, #22]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000b9c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    Transmit_MultiByte_Through_CAN(&hcan, can_tx_buffer, SPI_BUFFER_SIZE);
 8000ba0:	222a      	movs	r2, #42	@ 0x2a
 8000ba2:	4905      	ldr	r1, [pc, #20]	@ (8000bb8 <Can_TX_Callback+0xc8>)
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <Can_TX_Callback+0xe8>)
 8000ba6:	f7ff fc31 	bl	800040c <Transmit_MultiByte_Through_CAN>

    can_tx_buffer_lock = 0;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <Can_TX_Callback+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000480 	.word	0x20000480
 8000bbc:	20000454 	.word	0x20000454
 8000bc0:	20000486 	.word	0x20000486
 8000bc4:	2000045a 	.word	0x2000045a
 8000bc8:	20000490 	.word	0x20000490
 8000bcc:	20000464 	.word	0x20000464
 8000bd0:	200004b2 	.word	0x200004b2
 8000bd4:	200004b6 	.word	0x200004b6
 8000bd8:	200004e4 	.word	0x200004e4
 8000bdc:	200004aa 	.word	0x200004aa

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b096      	sub	sp, #88	@ 0x58
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 fcad 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f853 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 f979 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf2:	f000 f951 	bl	8000e98 <MX_DMA_Init>
  MX_CAN_Init();
 8000bf6:	f000 f893 	bl	8000d20 <MX_CAN_Init>
  MX_SPI2_Init();
 8000bfa:	f000 f8c7 	bl	8000d8c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bfe:	f000 f8fb 	bl	8000df8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Start();
 8000c02:	f7ff fdf1 	bl	80007e8 <Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of spiTask */
  osThreadDef(spiTask, SPITaskCallback, osPriorityIdle, 0, 128);
 8000c06:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <main+0x9c>)
 8000c08:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiTaskHandle = osThreadCreate(osThread(spiTask), NULL);
 8000c1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fd06 	bl	8004632 <osThreadCreate>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <main+0xa0>)
 8000c2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of canRxTask */
  osThreadDef(canRxTask, CANRXTaskFunction, osPriorityIdle, 0, 128);
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <main+0xa4>)
 8000c2e:	f107 0420 	add.w	r4, r7, #32
 8000c32:	461d      	mov	r5, r3
 8000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fcf3 	bl	8004632 <osThreadCreate>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <main+0xa8>)
 8000c50:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTxTask */
  osThreadDef(canTxTask, CanTXTaskFunction, osPriorityIdle, 0, 128);
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <main+0xac>)
 8000c54:	1d3c      	adds	r4, r7, #4
 8000c56:	461d      	mov	r5, r3
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fce2 	bl	8004632 <osThreadCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <main+0xb0>)
 8000c72:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c74:	f003 fcd6 	bl	8004624 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <main+0x98>
 8000c7c:	08006148 	.word	0x08006148
 8000c80:	20000634 	.word	0x20000634
 8000c84:	08006170 	.word	0x08006170
 8000c88:	20000638 	.word	0x20000638
 8000c8c:	08006198 	.word	0x08006198
 8000c90:	2000063c 	.word	0x2000063c

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b090      	sub	sp, #64	@ 0x40
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	2228      	movs	r2, #40	@ 0x28
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f005 f958 	bl	8005f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cd4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 f8b4 	bl	8002e4c <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000cea:	f000 f97f 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2102      	movs	r1, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fb21 	bl	8003350 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d14:	f000 f96a 	bl	8000fec <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3740      	adds	r7, #64	@ 0x40
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	@ (8000d88 <MX_CAN_Init+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d3e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d42:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d4a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_CAN_Init+0x64>)
 8000d72:	f000 fc19 	bl	80015a8 <HAL_CAN_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f000 f936 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200004e4 	.word	0x200004e4
 8000d88:	40006400 	.word	0x40006400

08000d8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000d92:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <MX_SPI2_Init+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000d98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000dc0:	2230      	movs	r2, #48	@ 0x30
 8000dc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000dd8:	220a      	movs	r2, #10
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <MX_SPI2_Init+0x64>)
 8000dde:	f002 fc63 	bl	80036a8 <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000de8:	f000 f900 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000050c 	.word	0x2000050c
 8000df4:	40003800 	.word	0x40003800

08000df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e16:	4a1f      	ldr	r2, [pc, #124]	@ (8000e94 <MX_TIM1_Init+0x9c>)
 8000e18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e1c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000e20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000e28:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e2a:	2209      	movs	r2, #9
 8000e2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e40:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e42:	f002 ffd6 	bl	8003df2 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f000 f8ce 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e5e:	f003 f959 	bl	8004114 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e68:	f000 f8c0 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_TIM1_Init+0x98>)
 8000e7a:	f003 fb3b 	bl	80044f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e84:	f000 f8b2 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200005ec 	.word	0x200005ec
 8000e94:	40012c00 	.word	0x40012c00

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <MX_DMA_Init+0x48>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <MX_DMA_Init+0x48>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <MX_DMA_Init+0x48>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	200e      	movs	r0, #14
 8000ebc:	f001 fa8d 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ec0:	200e      	movs	r0, #14
 8000ec2:	f001 faa6 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f001 fa85 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f001 fa9e 	bl	8002412 <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef8:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a1d      	ldr	r2, [pc, #116]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_GPIO_Init+0xa8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000f46:	4812      	ldr	r0, [pc, #72]	@ (8000f90 <MX_GPIO_Init+0xac>)
 8000f48:	f001 ff4f 	bl	8002dea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f62:	f001 fceb 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <MX_GPIO_Init+0xac>)
 8000f80:	f001 fcdc 	bl	800293c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010800 	.word	0x40010800
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <SPITaskCallback>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SPITaskCallback */
void SPITaskCallback(void const * argument)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  SPI_Callback();
 8000fa0:	f7ff fd56 	bl	8000a50 <SPI_Callback>
 8000fa4:	e7fc      	b.n	8000fa0 <SPITaskCallback+0x8>

08000fa6 <CANRXTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANRXTaskFunction */
void CANRXTaskFunction(void const * argument)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANRXTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	  CAN_RX_Callback();
 8000fae:	f7ff fc65 	bl	800087c <CAN_RX_Callback>
 8000fb2:	e7fc      	b.n	8000fae <CANRXTaskFunction+0x8>

08000fb4 <CanTXTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanTXTaskFunction */
void CanTXTaskFunction(void const * argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanTXTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	  Can_TX_Callback();
 8000fbc:	f7ff fd98 	bl	8000af0 <Can_TX_Callback>
 8000fc0:	e7fc      	b.n	8000fbc <CanTXTaskFunction+0x8>
	...

08000fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fd6:	f000 facb 	bl	8001570 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  On_Timer_Tick(htim);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fba4 	bl	8000728 <On_Timer_Tick>
  /* USER CODE END Callback 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40000800 	.word	0x40000800

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <Error_Handler+0x8>

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_MspInit+0x68>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <HAL_MspInit+0x68>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_MspInit+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_MspInit+0x68>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <HAL_MspInit+0x68>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_MspInit+0x68>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	210f      	movs	r1, #15
 8001032:	f06f 0001 	mvn.w	r0, #1
 8001036:	f001 f9d0 	bl	80023da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_MspInit+0x6c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_MspInit+0x6c>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <HAL_CAN_MspInit+0x9c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d139      	bne.n	80010fc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001088:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <HAL_CAN_MspInit+0xa0>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <HAL_CAN_MspInit+0xa0>)
 800108e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001092:	61d3      	str	r3, [r2, #28]
 8001094:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <HAL_CAN_MspInit+0xa0>)
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_CAN_MspInit+0xa0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <HAL_CAN_MspInit+0xa0>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_CAN_MspInit+0xa0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4619      	mov	r1, r3
 80010cc:	480f      	ldr	r0, [pc, #60]	@ (800110c <HAL_CAN_MspInit+0xa4>)
 80010ce:	f001 fc35 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4809      	ldr	r0, [pc, #36]	@ (800110c <HAL_CAN_MspInit+0xa4>)
 80010e8:	f001 fc28 	bl	800293c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2105      	movs	r1, #5
 80010f0:	2014      	movs	r0, #20
 80010f2:	f001 f972 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80010f6:	2014      	movs	r0, #20
 80010f8:	f001 f98b 	bl	8002412 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40006400 	.word	0x40006400
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800

08001110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a42      	ldr	r2, [pc, #264]	@ (8001234 <HAL_SPI_MspInit+0x124>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d17d      	bne.n	800122c <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001130:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_SPI_MspInit+0x128>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	4a40      	ldr	r2, [pc, #256]	@ (8001238 <HAL_SPI_MspInit+0x128>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113a:	61d3      	str	r3, [r2, #28]
 800113c:	4b3e      	ldr	r3, [pc, #248]	@ (8001238 <HAL_SPI_MspInit+0x128>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <HAL_SPI_MspInit+0x128>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a3a      	ldr	r2, [pc, #232]	@ (8001238 <HAL_SPI_MspInit+0x128>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b38      	ldr	r3, [pc, #224]	@ (8001238 <HAL_SPI_MspInit+0x128>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001160:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	4831      	ldr	r0, [pc, #196]	@ (800123c <HAL_SPI_MspInit+0x12c>)
 8001176:	f001 fbe1 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800117a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	482b      	ldr	r0, [pc, #172]	@ (800123c <HAL_SPI_MspInit+0x12c>)
 8001190:	f001 fbd4 	bl	800293c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001194:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 8001196:	4a2b      	ldr	r2, [pc, #172]	@ (8001244 <HAL_SPI_MspInit+0x134>)
 8001198:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119a:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80011b8:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80011c4:	481e      	ldr	r0, [pc, #120]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011c6:	f001 f933 	bl	8002430 <HAL_DMA_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80011d0:	f7ff ff0c 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011da:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <HAL_SPI_MspInit+0x130>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 80011e2:	4a1a      	ldr	r2, [pc, #104]	@ (800124c <HAL_SPI_MspInit+0x13c>)
 80011e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 80011e8:	2210      	movs	r2, #16
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 8001212:	f001 f90d 	bl	8002430 <HAL_DMA_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 800121c:	f7ff fee6 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 8001224:	649a      	str	r2, [r3, #72]	@ 0x48
 8001226:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <HAL_SPI_MspInit+0x138>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40003800 	.word	0x40003800
 8001238:	40021000 	.word	0x40021000
 800123c:	40010c00 	.word	0x40010c00
 8001240:	20000564 	.word	0x20000564
 8001244:	40020044 	.word	0x40020044
 8001248:	200005a8 	.word	0x200005a8
 800124c:	40020058 	.word	0x40020058

08001250 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <HAL_SPI_MspDeInit+0x44>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d114      	bne.n	800128c <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_SPI_MspDeInit+0x48>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <HAL_SPI_MspDeInit+0x48>)
 8001268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800126c:	61d3      	str	r3, [r2, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800126e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <HAL_SPI_MspDeInit+0x4c>)
 8001274:	f001 fce6 	bl	8002c44 <HAL_GPIO_DeInit>

    /* SPI2 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4618      	mov	r0, r3
 800127e:	f001 f931 	bl	80024e4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f92c 	bl	80024e4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	40010c00 	.word	0x40010c00

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <HAL_TIM_Base_MspInit+0x74>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12b      	bne.n	800130a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_TIM_Base_MspInit+0x78>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_TIM_Base_MspInit+0x78>)
 80012b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <HAL_TIM_Base_MspInit+0x78>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	2018      	movs	r0, #24
 80012d0:	f001 f883 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80012d4:	2018      	movs	r0, #24
 80012d6:	f001 f89c 	bl	8002412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2105      	movs	r1, #5
 80012de:	2019      	movs	r0, #25
 80012e0:	f001 f87b 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012e4:	2019      	movs	r0, #25
 80012e6:	f001 f894 	bl	8002412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2105      	movs	r1, #5
 80012ee:	201a      	movs	r0, #26
 80012f0:	f001 f873 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80012f4:	201a      	movs	r0, #26
 80012f6:	f001 f88c 	bl	8002412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2105      	movs	r1, #5
 80012fe:	201b      	movs	r0, #27
 8001300:	f001 f86b 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001304:	201b      	movs	r0, #27
 8001306:	f001 f884 	bl	8002412 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012c00 	.word	0x40012c00
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001332:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <HAL_InitTick+0xe8>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a33      	ldr	r2, [pc, #204]	@ (8001404 <HAL_InitTick+0xe8>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <HAL_InitTick+0xe8>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800134a:	f107 0210 	add.w	r2, r7, #16
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f002 f959 	bl	800360c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800135e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001364:	f002 f93e 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8001368:	6378      	str	r0, [r7, #52]	@ 0x34
 800136a:	e004      	b.n	8001376 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800136c:	f002 f93a 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8001370:	4603      	mov	r3, r0
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001378:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <HAL_InitTick+0xec>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3b01      	subs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <HAL_InitTick+0xf0>)
 8001386:	4a22      	ldr	r2, [pc, #136]	@ (8001410 <HAL_InitTick+0xf4>)
 8001388:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <HAL_InitTick+0xf0>)
 800138c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001390:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001392:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <HAL_InitTick+0xf0>)
 8001394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001396:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001398:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <HAL_InitTick+0xf0>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_InitTick+0xf0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_InitTick+0xf0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80013aa:	4818      	ldr	r0, [pc, #96]	@ (800140c <HAL_InitTick+0xf0>)
 80013ac:	f002 fd21 	bl	8003df2 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d11b      	bne.n	80013f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80013be:	4813      	ldr	r0, [pc, #76]	@ (800140c <HAL_InitTick+0xf0>)
 80013c0:	f002 fd66 	bl	8003e90 <HAL_TIM_Base_Start_IT>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d111      	bne.n	80013f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013d2:	201e      	movs	r0, #30
 80013d4:	f001 f81d 	bl	8002412 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d808      	bhi.n	80013f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80013de:	2200      	movs	r2, #0
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	201e      	movs	r0, #30
 80013e4:	f000 fff9 	bl	80023da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <HAL_InitTick+0xf8>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e002      	b.n	80013f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3738      	adds	r7, #56	@ 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	431bde83 	.word	0x431bde83
 800140c:	20000640 	.word	0x20000640
 8001410:	40000800 	.word	0x40000800
 8001414:	2000000c 	.word	0x2000000c

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <DMA1_Channel4_IRQHandler+0x10>)
 8001452:	f001 f93f 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000564 	.word	0x20000564

08001460 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <DMA1_Channel5_IRQHandler+0x10>)
 8001466:	f001 f935 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200005a8 	.word	0x200005a8

08001474 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800147a:	f000 fcd5 	bl	8001e28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200004e4 	.word	0x200004e4

08001488 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <TIM1_BRK_IRQHandler+0x10>)
 800148e:	f002 fd51 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200005ec 	.word	0x200005ec

0800149c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <TIM1_UP_IRQHandler+0x10>)
 80014a2:	f002 fd47 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200005ec 	.word	0x200005ec

080014b0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80014b6:	f002 fd3d 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200005ec 	.word	0x200005ec

080014c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <TIM1_CC_IRQHandler+0x10>)
 80014ca:	f002 fd33 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200005ec 	.word	0x200005ec

080014d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <TIM4_IRQHandler+0x10>)
 80014de:	f002 fd29 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000640 	.word	0x20000640

080014ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f8:	f7ff fff8 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480b      	ldr	r0, [pc, #44]	@ (800152c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014fe:	490c      	ldr	r1, [pc, #48]	@ (8001530 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001500:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001514:	4c09      	ldr	r4, [pc, #36]	@ (800153c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f004 fd77 	bl	8006014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff fb5b 	bl	8000be0 <main>
  bx lr
 800152a:	4770      	bx	lr
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001534:	080061f0 	.word	0x080061f0
  ldr r2, =_sbss
 8001538:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800153c:	20001520 	.word	0x20001520

08001540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC1_2_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_Init+0x28>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	@ (800156c <HAL_Init+0x28>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 ff35 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155a:	200f      	movs	r0, #15
 800155c:	f7ff fede 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001560:	f7ff fd4a 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40022000 	.word	0x40022000

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_IncTick+0x1c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_IncTick+0x20>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <HAL_IncTick+0x20>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20000010 	.word	0x20000010
 8001590:	20000688 	.word	0x20000688

08001594 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b02      	ldr	r3, [pc, #8]	@ (80015a4 <HAL_GetTick+0x10>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000688 	.word	0x20000688

080015a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0ed      	b.n	8001796 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fd4e 	bl	8001068 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015dc:	f7ff ffda 	bl	8001594 <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015e2:	e012      	b.n	800160a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e4:	f7ff ffd6 	bl	8001594 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b0a      	cmp	r3, #10
 80015f0:	d90b      	bls.n	800160a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2205      	movs	r2, #5
 8001602:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0c5      	b.n	8001796 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0e5      	beq.n	80015e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0202 	bic.w	r2, r2, #2
 8001626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001628:	f7ff ffb4 	bl	8001594 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800162e:	e012      	b.n	8001656 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001630:	f7ff ffb0 	bl	8001594 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b0a      	cmp	r3, #10
 800163c:	d90b      	bls.n	8001656 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2205      	movs	r2, #5
 800164e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e09f      	b.n	8001796 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e5      	bne.n	8001630 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e007      	b.n	800168e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7e5b      	ldrb	r3, [r3, #25]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e9b      	ldrb	r3, [r3, #26]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0220 	orr.w	r2, r2, #32
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0220 	bic.w	r2, r2, #32
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7edb      	ldrb	r3, [r3, #27]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0210 	bic.w	r2, r2, #16
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e007      	b.n	800170c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0210 	orr.w	r2, r2, #16
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7f1b      	ldrb	r3, [r3, #28]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0208 	orr.w	r2, r2, #8
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e007      	b.n	8001736 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0208 	bic.w	r2, r2, #8
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7f5b      	ldrb	r3, [r3, #29]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0204 	orr.w	r2, r2, #4
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e007      	b.n	8001760 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0204 	bic.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	ea42 0103 	orr.w	r1, r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	1e5a      	subs	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800179e:	b480      	push	{r7}
 80017a0:	b087      	sub	sp, #28
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d003      	beq.n	80017c4 <HAL_CAN_ConfigFilter+0x26>
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	f040 80aa 	bne.w	8001918 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2201      	movs	r2, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d123      	bne.n	8001846 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	401a      	ands	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001820:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3248      	adds	r2, #72	@ 0x48
 8001826:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800183a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800183c:	6979      	ldr	r1, [r7, #20]
 800183e:	3348      	adds	r3, #72	@ 0x48
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d122      	bne.n	8001894 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	431a      	orrs	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800186e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3248      	adds	r2, #72	@ 0x48
 8001874:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001888:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800188a:	6979      	ldr	r1, [r7, #20]
 800188c:	3348      	adds	r3, #72	@ 0x48
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80018ae:	e007      	b.n	80018c0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018da:	e007      	b.n	80018ec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800190a:	f023 0201 	bic.w	r2, r3, #1
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e006      	b.n	8001926 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d12e      	bne.n	80019a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800195c:	f7ff fe1a 	bl	8001594 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001962:	e012      	b.n	800198a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001964:	f7ff fe16 	bl	8001594 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d90b      	bls.n	800198a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2205      	movs	r2, #5
 8001982:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e012      	b.n	80019b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e5      	bne.n	8001964 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e006      	b.n	80019b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
  }
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d003      	beq.n	80019e4 <HAL_CAN_AddTxMessage+0x2c>
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	f040 80ad 	bne.w	8001b3e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8095 	beq.w	8001b2e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	0e1b      	lsrs	r3, r3, #24
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	6809      	ldr	r1, [r1, #0]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3318      	adds	r3, #24
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	440b      	add	r3, r1
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e00f      	b.n	8001a5c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a46:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a50:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3318      	adds	r3, #24
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	440b      	add	r3, r1
 8001a5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3318      	adds	r3, #24
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	7d1b      	ldrb	r3, [r3, #20]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d111      	bne.n	8001a9c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3318      	adds	r3, #24
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4413      	add	r3, r2
 8001a84:	3304      	adds	r3, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	6811      	ldr	r1, [r2, #0]
 8001a8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3318      	adds	r3, #24
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	440b      	add	r3, r1
 8001a98:	3304      	adds	r3, #4
 8001a9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3307      	adds	r3, #7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	061a      	lsls	r2, r3, #24
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	3204      	adds	r2, #4
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	4610      	mov	r0, r2
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	6811      	ldr	r1, [r2, #0]
 8001ac4:	ea43 0200 	orr.w	r2, r3, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ad2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3303      	adds	r3, #3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	061a      	lsls	r2, r3, #24
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	041b      	lsls	r3, r3, #16
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	4313      	orrs	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	4610      	mov	r0, r2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	6811      	ldr	r1, [r2, #0]
 8001afa:	ea43 0200 	orr.w	r2, r3, r0
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3318      	adds	r3, #24
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	6811      	ldr	r1, [r2, #0]
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3318      	adds	r3, #24
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	440b      	add	r3, r1
 8001b28:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e00e      	b.n	8001b4c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e006      	b.n	8001b4c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
  }
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3724      	adds	r7, #36	@ 0x24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d002      	beq.n	8001b78 <HAL_CAN_IsTxMessagePending+0x22>
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d10b      	bne.n	8001b90 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	069b      	lsls	r3, r3, #26
 8001b82:	401a      	ands	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	069b      	lsls	r3, r3, #26
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001b90:	68fb      	ldr	r3, [r7, #12]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d003      	beq.n	8001bc0 <HAL_CAN_GetRxMessage+0x24>
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	f040 8103 	bne.w	8001dc6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10e      	bne.n	8001be4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d116      	bne.n	8001c02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0f7      	b.n	8001dd4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d107      	bne.n	8001c02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0e8      	b.n	8001dd4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	331b      	adds	r3, #27
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0204 	and.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10c      	bne.n	8001c3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	331b      	adds	r3, #27
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0d5b      	lsrs	r3, r3, #21
 8001c30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e00b      	b.n	8001c52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	331b      	adds	r3, #27
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	331b      	adds	r3, #27
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	4413      	add	r3, r2
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0202 	and.w	r2, r3, #2
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	331b      	adds	r3, #27
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2208      	movs	r2, #8
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	e00b      	b.n	8001ca0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	331b      	adds	r3, #27
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	331b      	adds	r3, #27
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	331b      	adds	r3, #27
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0a1a      	lsrs	r2, r3, #8
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0c1a      	lsrs	r2, r3, #16
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3302      	adds	r3, #2
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0e1a      	lsrs	r2, r3, #24
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	3303      	adds	r3, #3
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	3304      	adds	r3, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0a1a      	lsrs	r2, r3, #8
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3305      	adds	r3, #5
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0c1a      	lsrs	r2, r3, #16
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	3306      	adds	r3, #6
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0e1a      	lsrs	r2, r3, #24
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	3307      	adds	r3, #7
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d108      	bne.n	8001db2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	e007      	b.n	8001dc2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0220 	orr.w	r2, r2, #32
 8001dc0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e006      	b.n	8001dd4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
  }
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d002      	beq.n	8001dfc <HAL_CAN_ActivateNotification+0x1e>
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d109      	bne.n	8001e10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6959      	ldr	r1, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e006      	b.n	8001e1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d07c      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f983 	bl	8002196 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e90:	e016      	b.n	8001ec0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea4:	e00c      	b.n	8001ec0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb8:	e002      	b.n	8001ec0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f986 	bl	80021cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d024      	beq.n	8001f14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f962 	bl	80021a8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ee4:	e016      	b.n	8001f14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef8:	e00c      	b.n	8001f14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0c:	e002      	b.n	8001f14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f965 	bl	80021de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d024      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f941 	bl	80021ba <HAL_CAN_TxMailbox2CompleteCallback>
 8001f38:	e016      	b.n	8001f68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4c:	e00c      	b.n	8001f68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f60:	e002      	b.n	8001f68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f944 	bl	80021f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2210      	movs	r2, #16
 8001f8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f92a 	bl	8002202 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fb36 	bl	8000638 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2210      	movs	r2, #16
 8001fee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2208      	movs	r2, #8
 800200a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f90a 	bl	8002226 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8f2 	bl	8002214 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2210      	movs	r2, #16
 800204a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8f3 	bl	8002238 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2208      	movs	r2, #8
 800206c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8eb 	bl	800224a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d07b      	beq.n	8002176 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d072      	beq.n	800216e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d043      	beq.n	800216e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03e      	beq.n	800216e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020f6:	2b60      	cmp	r3, #96	@ 0x60
 80020f8:	d02b      	beq.n	8002152 <HAL_CAN_IRQHandler+0x32a>
 80020fa:	2b60      	cmp	r3, #96	@ 0x60
 80020fc:	d82e      	bhi.n	800215c <HAL_CAN_IRQHandler+0x334>
 80020fe:	2b50      	cmp	r3, #80	@ 0x50
 8002100:	d022      	beq.n	8002148 <HAL_CAN_IRQHandler+0x320>
 8002102:	2b50      	cmp	r3, #80	@ 0x50
 8002104:	d82a      	bhi.n	800215c <HAL_CAN_IRQHandler+0x334>
 8002106:	2b40      	cmp	r3, #64	@ 0x40
 8002108:	d019      	beq.n	800213e <HAL_CAN_IRQHandler+0x316>
 800210a:	2b40      	cmp	r3, #64	@ 0x40
 800210c:	d826      	bhi.n	800215c <HAL_CAN_IRQHandler+0x334>
 800210e:	2b30      	cmp	r3, #48	@ 0x30
 8002110:	d010      	beq.n	8002134 <HAL_CAN_IRQHandler+0x30c>
 8002112:	2b30      	cmp	r3, #48	@ 0x30
 8002114:	d822      	bhi.n	800215c <HAL_CAN_IRQHandler+0x334>
 8002116:	2b10      	cmp	r3, #16
 8002118:	d002      	beq.n	8002120 <HAL_CAN_IRQHandler+0x2f8>
 800211a:	2b20      	cmp	r3, #32
 800211c:	d005      	beq.n	800212a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800211e:	e01d      	b.n	800215c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002128:	e019      	b.n	800215e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002132:	e014      	b.n	800215e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	f043 0320 	orr.w	r3, r3, #32
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800213c:	e00f      	b.n	800215e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002146:	e00a      	b.n	800215e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002150:	e005      	b.n	800215e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800215a:	e000      	b.n	800215e <HAL_CAN_IRQHandler+0x336>
            break;
 800215c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800216c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2204      	movs	r2, #4
 8002174:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f867 	bl	800225c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	@ 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
	...

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4906      	ldr	r1, [pc, #24]	@ (8002308 <__NVIC_EnableIRQ+0x34>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	@ (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff4f 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff64 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ffb2 	bl	8002360 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff81 	bl	800230c <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff57 	bl	80022d4 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e043      	b.n	80024ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b22      	ldr	r3, [pc, #136]	@ (80024d8 <HAL_DMA_Init+0xa8>)
 800244e:	4413      	add	r3, r2
 8002450:	4a22      	ldr	r2, [pc, #136]	@ (80024dc <HAL_DMA_Init+0xac>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_DMA_Init+0xb0>)
 8002462:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800247a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800247e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	bffdfff8 	.word	0xbffdfff8
 80024dc:	cccccccd 	.word	0xcccccccd
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e046      	b.n	8002584 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4b18      	ldr	r3, [pc, #96]	@ (8002590 <HAL_DMA_DeInit+0xac>)
 800252e:	4413      	add	r3, r2
 8002530:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <HAL_DMA_DeInit+0xb0>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	009a      	lsls	r2, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <HAL_DMA_DeInit+0xb4>)
 8002542:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	bffdfff8 	.word	0xbffdfff8
 8002594:	cccccccd 	.word	0xcccccccd
 8002598:	40020000 	.word	0x40020000

0800259c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_DMA_Start_IT+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e04b      	b.n	8002654 <HAL_DMA_Start_IT+0xb8>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d13a      	bne.n	8002646 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f973 	bl	80028e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 020e 	orr.w	r2, r2, #14
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e00f      	b.n	8002634 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0204 	bic.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 020a 	orr.w	r2, r2, #10
 8002632:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e005      	b.n	8002652 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2204      	movs	r2, #4
 8002678:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e020      	b.n	80026c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020e 	bic.w	r2, r2, #14
 8002694:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	2204      	movs	r2, #4
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d04f      	beq.n	800279c <HAL_DMA_IRQHandler+0xc8>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d04a      	beq.n	800279c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0204 	bic.w	r2, r2, #4
 8002722:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a66      	ldr	r2, [pc, #408]	@ (80028c4 <HAL_DMA_IRQHandler+0x1f0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d029      	beq.n	8002782 <HAL_DMA_IRQHandler+0xae>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a65      	ldr	r2, [pc, #404]	@ (80028c8 <HAL_DMA_IRQHandler+0x1f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <HAL_DMA_IRQHandler+0xaa>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a63      	ldr	r2, [pc, #396]	@ (80028cc <HAL_DMA_IRQHandler+0x1f8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01a      	beq.n	8002778 <HAL_DMA_IRQHandler+0xa4>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a62      	ldr	r2, [pc, #392]	@ (80028d0 <HAL_DMA_IRQHandler+0x1fc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d012      	beq.n	8002772 <HAL_DMA_IRQHandler+0x9e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a60      	ldr	r2, [pc, #384]	@ (80028d4 <HAL_DMA_IRQHandler+0x200>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00a      	beq.n	800276c <HAL_DMA_IRQHandler+0x98>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5f      	ldr	r2, [pc, #380]	@ (80028d8 <HAL_DMA_IRQHandler+0x204>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d102      	bne.n	8002766 <HAL_DMA_IRQHandler+0x92>
 8002760:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002764:	e00e      	b.n	8002784 <HAL_DMA_IRQHandler+0xb0>
 8002766:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800276a:	e00b      	b.n	8002784 <HAL_DMA_IRQHandler+0xb0>
 800276c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002770:	e008      	b.n	8002784 <HAL_DMA_IRQHandler+0xb0>
 8002772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002776:	e005      	b.n	8002784 <HAL_DMA_IRQHandler+0xb0>
 8002778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800277c:	e002      	b.n	8002784 <HAL_DMA_IRQHandler+0xb0>
 800277e:	2340      	movs	r3, #64	@ 0x40
 8002780:	e000      	b.n	8002784 <HAL_DMA_IRQHandler+0xb0>
 8002782:	2304      	movs	r3, #4
 8002784:	4a55      	ldr	r2, [pc, #340]	@ (80028dc <HAL_DMA_IRQHandler+0x208>)
 8002786:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8094 	beq.w	80028ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800279a:	e08e      	b.n	80028ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2202      	movs	r2, #2
 80027a2:	409a      	lsls	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d056      	beq.n	800285a <HAL_DMA_IRQHandler+0x186>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d051      	beq.n	800285a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10b      	bne.n	80027dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 020a 	bic.w	r2, r2, #10
 80027d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a38      	ldr	r2, [pc, #224]	@ (80028c4 <HAL_DMA_IRQHandler+0x1f0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d029      	beq.n	800283a <HAL_DMA_IRQHandler+0x166>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a37      	ldr	r2, [pc, #220]	@ (80028c8 <HAL_DMA_IRQHandler+0x1f4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_IRQHandler+0x162>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a35      	ldr	r2, [pc, #212]	@ (80028cc <HAL_DMA_IRQHandler+0x1f8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA_IRQHandler+0x15c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <HAL_DMA_IRQHandler+0x1fc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d012      	beq.n	800282a <HAL_DMA_IRQHandler+0x156>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a32      	ldr	r2, [pc, #200]	@ (80028d4 <HAL_DMA_IRQHandler+0x200>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00a      	beq.n	8002824 <HAL_DMA_IRQHandler+0x150>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a31      	ldr	r2, [pc, #196]	@ (80028d8 <HAL_DMA_IRQHandler+0x204>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d102      	bne.n	800281e <HAL_DMA_IRQHandler+0x14a>
 8002818:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800281c:	e00e      	b.n	800283c <HAL_DMA_IRQHandler+0x168>
 800281e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002822:	e00b      	b.n	800283c <HAL_DMA_IRQHandler+0x168>
 8002824:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002828:	e008      	b.n	800283c <HAL_DMA_IRQHandler+0x168>
 800282a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800282e:	e005      	b.n	800283c <HAL_DMA_IRQHandler+0x168>
 8002830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002834:	e002      	b.n	800283c <HAL_DMA_IRQHandler+0x168>
 8002836:	2320      	movs	r3, #32
 8002838:	e000      	b.n	800283c <HAL_DMA_IRQHandler+0x168>
 800283a:	2302      	movs	r3, #2
 800283c:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_DMA_IRQHandler+0x208>)
 800283e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	d034      	beq.n	80028ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002858:	e02f      	b.n	80028ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	2208      	movs	r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <HAL_DMA_IRQHandler+0x1e8>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020e 	bic.w	r2, r2, #14
 8002882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
    }
  }
  return;
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
}
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40020008 	.word	0x40020008
 80028c8:	4002001c 	.word	0x4002001c
 80028cc:	40020030 	.word	0x40020030
 80028d0:	40020044 	.word	0x40020044
 80028d4:	40020058 	.word	0x40020058
 80028d8:	4002006c 	.word	0x4002006c
 80028dc:	40020000 	.word	0x40020000

080028e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b10      	cmp	r3, #16
 800290c:	d108      	bne.n	8002920 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800291e:	e007      	b.n	8002930 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	60da      	str	r2, [r3, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
	...

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b08b      	sub	sp, #44	@ 0x2c
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294e:	e169      	b.n	8002c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002950:	2201      	movs	r2, #1
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 8158 	bne.w	8002c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a9a      	ldr	r2, [pc, #616]	@ (8002bdc <HAL_GPIO_Init+0x2a0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d05e      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 8002978:	4a98      	ldr	r2, [pc, #608]	@ (8002bdc <HAL_GPIO_Init+0x2a0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d875      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 800297e:	4a98      	ldr	r2, [pc, #608]	@ (8002be0 <HAL_GPIO_Init+0x2a4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d058      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 8002984:	4a96      	ldr	r2, [pc, #600]	@ (8002be0 <HAL_GPIO_Init+0x2a4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d86f      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 800298a:	4a96      	ldr	r2, [pc, #600]	@ (8002be4 <HAL_GPIO_Init+0x2a8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d052      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 8002990:	4a94      	ldr	r2, [pc, #592]	@ (8002be4 <HAL_GPIO_Init+0x2a8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d869      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 8002996:	4a94      	ldr	r2, [pc, #592]	@ (8002be8 <HAL_GPIO_Init+0x2ac>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d04c      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 800299c:	4a92      	ldr	r2, [pc, #584]	@ (8002be8 <HAL_GPIO_Init+0x2ac>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d863      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 80029a2:	4a92      	ldr	r2, [pc, #584]	@ (8002bec <HAL_GPIO_Init+0x2b0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d046      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 80029a8:	4a90      	ldr	r2, [pc, #576]	@ (8002bec <HAL_GPIO_Init+0x2b0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d85d      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	d82a      	bhi.n	8002a08 <HAL_GPIO_Init+0xcc>
 80029b2:	2b12      	cmp	r3, #18
 80029b4:	d859      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 80029b6:	a201      	add	r2, pc, #4	@ (adr r2, 80029bc <HAL_GPIO_Init+0x80>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	08002a37 	.word	0x08002a37
 80029c0:	08002a11 	.word	0x08002a11
 80029c4:	08002a23 	.word	0x08002a23
 80029c8:	08002a65 	.word	0x08002a65
 80029cc:	08002a6b 	.word	0x08002a6b
 80029d0:	08002a6b 	.word	0x08002a6b
 80029d4:	08002a6b 	.word	0x08002a6b
 80029d8:	08002a6b 	.word	0x08002a6b
 80029dc:	08002a6b 	.word	0x08002a6b
 80029e0:	08002a6b 	.word	0x08002a6b
 80029e4:	08002a6b 	.word	0x08002a6b
 80029e8:	08002a6b 	.word	0x08002a6b
 80029ec:	08002a6b 	.word	0x08002a6b
 80029f0:	08002a6b 	.word	0x08002a6b
 80029f4:	08002a6b 	.word	0x08002a6b
 80029f8:	08002a6b 	.word	0x08002a6b
 80029fc:	08002a6b 	.word	0x08002a6b
 8002a00:	08002a19 	.word	0x08002a19
 8002a04:	08002a2d 	.word	0x08002a2d
 8002a08:	4a79      	ldr	r2, [pc, #484]	@ (8002bf0 <HAL_GPIO_Init+0x2b4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a0e:	e02c      	b.n	8002a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	623b      	str	r3, [r7, #32]
          break;
 8002a16:	e029      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	623b      	str	r3, [r7, #32]
          break;
 8002a20:	e024      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	3308      	adds	r3, #8
 8002a28:	623b      	str	r3, [r7, #32]
          break;
 8002a2a:	e01f      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	330c      	adds	r3, #12
 8002a32:	623b      	str	r3, [r7, #32]
          break;
 8002a34:	e01a      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	623b      	str	r3, [r7, #32]
          break;
 8002a42:	e013      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	611a      	str	r2, [r3, #16]
          break;
 8002a56:	e009      	b.n	8002a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	615a      	str	r2, [r3, #20]
          break;
 8002a62:	e003      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
          break;
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          break;
 8002a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2bff      	cmp	r3, #255	@ 0xff
 8002a70:	d801      	bhi.n	8002a76 <HAL_GPIO_Init+0x13a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	e001      	b.n	8002a7a <HAL_GPIO_Init+0x13e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2bff      	cmp	r3, #255	@ 0xff
 8002a80:	d802      	bhi.n	8002a88 <HAL_GPIO_Init+0x14c>
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	e002      	b.n	8002a8e <HAL_GPIO_Init+0x152>
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	3b08      	subs	r3, #8
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	210f      	movs	r1, #15
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	6a39      	ldr	r1, [r7, #32]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80b1 	beq.w	8002c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002abc:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf4 <HAL_GPIO_Init+0x2b8>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf4 <HAL_GPIO_Init+0x2b8>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf4 <HAL_GPIO_Init+0x2b8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ad4:	4a48      	ldr	r2, [pc, #288]	@ (8002bf8 <HAL_GPIO_Init+0x2bc>)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	3302      	adds	r3, #2
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a40      	ldr	r2, [pc, #256]	@ (8002bfc <HAL_GPIO_Init+0x2c0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <HAL_GPIO_Init+0x1ec>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3f      	ldr	r2, [pc, #252]	@ (8002c00 <HAL_GPIO_Init+0x2c4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00d      	beq.n	8002b24 <HAL_GPIO_Init+0x1e8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c04 <HAL_GPIO_Init+0x2c8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <HAL_GPIO_Init+0x1e4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3d      	ldr	r2, [pc, #244]	@ (8002c08 <HAL_GPIO_Init+0x2cc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_GPIO_Init+0x1e0>
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e004      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e002      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	f002 0203 	and.w	r2, r2, #3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4093      	lsls	r3, r2
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b3a:	492f      	ldr	r1, [pc, #188]	@ (8002bf8 <HAL_GPIO_Init+0x2bc>)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	492c      	ldr	r1, [pc, #176]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b62:	4b2a      	ldr	r3, [pc, #168]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4928      	ldr	r1, [pc, #160]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b7c:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	4922      	ldr	r1, [pc, #136]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60cb      	str	r3, [r1, #12]
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b8a:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	491e      	ldr	r1, [pc, #120]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4918      	ldr	r1, [pc, #96]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4914      	ldr	r1, [pc, #80]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d021      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	490e      	ldr	r1, [pc, #56]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e021      	b.n	8002c1e <HAL_GPIO_Init+0x2e2>
 8002bda:	bf00      	nop
 8002bdc:	10320000 	.word	0x10320000
 8002be0:	10310000 	.word	0x10310000
 8002be4:	10220000 	.word	0x10220000
 8002be8:	10210000 	.word	0x10210000
 8002bec:	10120000 	.word	0x10120000
 8002bf0:	10110000 	.word	0x10110000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40010800 	.word	0x40010800
 8002c00:	40010c00 	.word	0x40010c00
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40011400 	.word	0x40011400
 8002c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4909      	ldr	r1, [pc, #36]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	3301      	adds	r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f47f ae8e 	bne.w	8002950 <HAL_GPIO_Init+0x14>
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	372c      	adds	r7, #44	@ 0x2c
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002c52:	e09a      	b.n	8002d8a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c54:	2201      	movs	r2, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 808d 	beq.w	8002d84 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002c6a:	4a4e      	ldr	r2, [pc, #312]	@ (8002da4 <HAL_GPIO_DeInit+0x160>)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a46      	ldr	r2, [pc, #280]	@ (8002da8 <HAL_GPIO_DeInit+0x164>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_GPIO_DeInit+0x78>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a45      	ldr	r2, [pc, #276]	@ (8002dac <HAL_GPIO_DeInit+0x168>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_GPIO_DeInit+0x74>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a44      	ldr	r2, [pc, #272]	@ (8002db0 <HAL_GPIO_DeInit+0x16c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <HAL_GPIO_DeInit+0x70>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a43      	ldr	r2, [pc, #268]	@ (8002db4 <HAL_GPIO_DeInit+0x170>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_GPIO_DeInit+0x6c>
 8002cac:	2303      	movs	r3, #3
 8002cae:	e006      	b.n	8002cbe <HAL_GPIO_DeInit+0x7a>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e004      	b.n	8002cbe <HAL_GPIO_DeInit+0x7a>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e002      	b.n	8002cbe <HAL_GPIO_DeInit+0x7a>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_GPIO_DeInit+0x7a>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	f002 0203 	and.w	r2, r2, #3
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	4093      	lsls	r3, r2
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d132      	bne.n	8002d34 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002cce:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	4938      	ldr	r1, [pc, #224]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002cdc:	4b36      	ldr	r3, [pc, #216]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	4934      	ldr	r1, [pc, #208]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002cea:	4b33      	ldr	r3, [pc, #204]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	4931      	ldr	r1, [pc, #196]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	492d      	ldr	r1, [pc, #180]	@ (8002db8 <HAL_GPIO_DeInit+0x174>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002d16:	4a23      	ldr	r2, [pc, #140]	@ (8002da4 <HAL_GPIO_DeInit+0x160>)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	481f      	ldr	r0, [pc, #124]	@ (8002da4 <HAL_GPIO_DeInit+0x160>)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	3302      	adds	r3, #2
 8002d30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2bff      	cmp	r3, #255	@ 0xff
 8002d38:	d801      	bhi.n	8002d3e <HAL_GPIO_DeInit+0xfa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	e001      	b.n	8002d42 <HAL_GPIO_DeInit+0xfe>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2bff      	cmp	r3, #255	@ 0xff
 8002d48:	d802      	bhi.n	8002d50 <HAL_GPIO_DeInit+0x10c>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	e002      	b.n	8002d56 <HAL_GPIO_DeInit+0x112>
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3b08      	subs	r3, #8
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	210f      	movs	r1, #15
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	2104      	movs	r1, #4
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	431a      	orrs	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	401a      	ands	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	3301      	adds	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f47f af5e 	bne.w	8002c54 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	@ 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40010800 	.word	0x40010800
 8002dac:	40010c00 	.word	0x40010c00
 8002db0:	40011000 	.word	0x40011000
 8002db4:	40011400 	.word	0x40011400
 8002db8:	40010400 	.word	0x40010400

08002dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	e001      	b.n	8002dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	807b      	strh	r3, [r7, #2]
 8002df6:	4613      	mov	r3, r2
 8002df8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dfa:	787b      	ldrb	r3, [r7, #1]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e06:	e003      	b.n	8002e10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	041a      	lsls	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	611a      	str	r2, [r3, #16]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e2c:	887a      	ldrh	r2, [r7, #2]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	041a      	lsls	r2, r3, #16
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	611a      	str	r2, [r3, #16]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e272      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8087 	beq.w	8002f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e6c:	4b92      	ldr	r3, [pc, #584]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d00c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e78:	4b8f      	ldr	r3, [pc, #572]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d112      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5e>
 8002e84:	4b8c      	ldr	r3, [pc, #560]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e92:	4b89      	ldr	r3, [pc, #548]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d06c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x12c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d168      	bne.n	8002f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e24c      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x76>
 8002eb4:	4b80      	ldr	r3, [pc, #512]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a7f      	ldr	r2, [pc, #508]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e02e      	b.n	8002f20 <HAL_RCC_OscConfig+0xd4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x98>
 8002eca:	4b7b      	ldr	r3, [pc, #492]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7a      	ldr	r2, [pc, #488]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b78      	ldr	r3, [pc, #480]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a77      	ldr	r2, [pc, #476]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xd4>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0xbc>
 8002eee:	4b72      	ldr	r3, [pc, #456]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a71      	ldr	r2, [pc, #452]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b6f      	ldr	r3, [pc, #444]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6e      	ldr	r2, [pc, #440]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xd4>
 8002f08:	4b6b      	ldr	r3, [pc, #428]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b68      	ldr	r3, [pc, #416]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a67      	ldr	r2, [pc, #412]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fb34 	bl	8001594 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fb30 	bl	8001594 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	@ 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e200      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b5d      	ldr	r3, [pc, #372]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe4>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fb20 	bl	8001594 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fb1c 	bl	8001594 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1ec      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x10c>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f86:	4b4c      	ldr	r3, [pc, #304]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f92:	4b49      	ldr	r3, [pc, #292]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x18c>
 8002f9e:	4b46      	ldr	r3, [pc, #280]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b43      	ldr	r3, [pc, #268]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x176>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c0      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4939      	ldr	r1, [pc, #228]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <HAL_RCC_OscConfig+0x270>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fad5 	bl	8001594 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe fad1 	bl	8001594 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a1      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b2a      	ldr	r3, [pc, #168]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4927      	ldr	r1, [pc, #156]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b26      	ldr	r3, [pc, #152]	@ (80030bc <HAL_RCC_OscConfig+0x270>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fab4 	bl	8001594 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe fab0 	bl	8001594 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e180      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d03a      	beq.n	80030d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d019      	beq.n	8003096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7fe fa94 	bl	8001594 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe fa90 	bl	8001594 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e160      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800308e:	2001      	movs	r0, #1
 8003090:	f000 faec 	bl	800366c <RCC_Delay>
 8003094:	e01c      	b.n	80030d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309c:	f7fe fa7a 	bl	8001594 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a2:	e00f      	b.n	80030c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fe fa76 	bl	8001594 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d908      	bls.n	80030c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e146      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	42420000 	.word	0x42420000
 80030c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	4b92      	ldr	r3, [pc, #584]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e9      	bne.n	80030a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a6 	beq.w	800322a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b88      	ldr	r3, [pc, #544]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a87      	ldr	r2, [pc, #540]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	61d3      	str	r3, [r2, #28]
 80030fa:	4b85      	ldr	r3, [pc, #532]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b82      	ldr	r3, [pc, #520]	@ (8003314 <HAL_RCC_OscConfig+0x4c8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d118      	bne.n	8003148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b7f      	ldr	r3, [pc, #508]	@ (8003314 <HAL_RCC_OscConfig+0x4c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7e      	ldr	r2, [pc, #504]	@ (8003314 <HAL_RCC_OscConfig+0x4c8>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7fe fa37 	bl	8001594 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7fe fa33 	bl	8001594 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	@ 0x64
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e103      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b75      	ldr	r3, [pc, #468]	@ (8003314 <HAL_RCC_OscConfig+0x4c8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x312>
 8003150:	4b6f      	ldr	r3, [pc, #444]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a6e      	ldr	r2, [pc, #440]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6213      	str	r3, [r2, #32]
 800315c:	e02d      	b.n	80031ba <HAL_RCC_OscConfig+0x36e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x334>
 8003166:	4b6a      	ldr	r3, [pc, #424]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4a69      	ldr	r2, [pc, #420]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6213      	str	r3, [r2, #32]
 8003172:	4b67      	ldr	r3, [pc, #412]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a66      	ldr	r2, [pc, #408]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	e01c      	b.n	80031ba <HAL_RCC_OscConfig+0x36e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x356>
 8003188:	4b61      	ldr	r3, [pc, #388]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4a60      	ldr	r2, [pc, #384]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	6213      	str	r3, [r2, #32]
 8003194:	4b5e      	ldr	r3, [pc, #376]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a5d      	ldr	r2, [pc, #372]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6213      	str	r3, [r2, #32]
 80031a0:	e00b      	b.n	80031ba <HAL_RCC_OscConfig+0x36e>
 80031a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	4b58      	ldr	r3, [pc, #352]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a57      	ldr	r2, [pc, #348]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d015      	beq.n	80031ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7fe f9e7 	bl	8001594 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe f9e3 	bl	8001594 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0b1      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ee      	beq.n	80031ca <HAL_RCC_OscConfig+0x37e>
 80031ec:	e014      	b.n	8003218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe f9d1 	bl	8001594 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe f9cd 	bl	8001594 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e09b      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	4b40      	ldr	r3, [pc, #256]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ee      	bne.n	80031f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4b3c      	ldr	r3, [pc, #240]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4a3b      	ldr	r2, [pc, #236]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8087 	beq.w	8003342 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003234:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d061      	beq.n	8003304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d146      	bne.n	80032d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003248:	4b33      	ldr	r3, [pc, #204]	@ (8003318 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe f9a1 	bl	8001594 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe f99d 	bl	8001594 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e06d      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	4b29      	ldr	r3, [pc, #164]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327c:	d108      	bne.n	8003290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800327e:	4b24      	ldr	r3, [pc, #144]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4921      	ldr	r1, [pc, #132]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003290:	4b1f      	ldr	r3, [pc, #124]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a19      	ldr	r1, [r3, #32]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	430b      	orrs	r3, r1
 80032a2:	491b      	ldr	r1, [pc, #108]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fe f971 	bl	8001594 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe f96d 	bl	8001594 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e03d      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46a>
 80032d4:	e035      	b.n	8003342 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <HAL_RCC_OscConfig+0x4cc>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe f95a 	bl	8001594 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe f956 	bl	8001594 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e026      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x498>
 8003302:	e01e      	b.n	8003342 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e019      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800331c:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <HAL_RCC_OscConfig+0x500>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	429a      	cmp	r2, r3
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0d0      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d910      	bls.n	8003394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b67      	ldr	r3, [pc, #412]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 0207 	bic.w	r2, r3, #7
 800337a:	4965      	ldr	r1, [pc, #404]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b63      	ldr	r3, [pc, #396]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0b8      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ac:	4b59      	ldr	r3, [pc, #356]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a58      	ldr	r2, [pc, #352]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c4:	4b53      	ldr	r3, [pc, #332]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a52      	ldr	r2, [pc, #328]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d0:	4b50      	ldr	r3, [pc, #320]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	494d      	ldr	r1, [pc, #308]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d040      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b47      	ldr	r3, [pc, #284]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d115      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e07f      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b41      	ldr	r3, [pc, #260]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e073      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3d      	ldr	r3, [pc, #244]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06b      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4936      	ldr	r1, [pc, #216]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7fe f8a8 	bl	8001594 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fe f8a4 	bl	8001594 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e053      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2d      	ldr	r3, [pc, #180]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b27      	ldr	r3, [pc, #156]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d210      	bcs.n	80034a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4922      	ldr	r1, [pc, #136]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e032      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4916      	ldr	r1, [pc, #88]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ca:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	490e      	ldr	r1, [pc, #56]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034de:	f000 f821 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	490a      	ldr	r1, [pc, #40]	@ (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	5ccb      	ldrb	r3, [r1, r3]
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	4a09      	ldr	r2, [pc, #36]	@ (800351c <HAL_RCC_ClockConfig+0x1cc>)
 80034f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034fa:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <HAL_RCC_ClockConfig+0x1d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd ff0c 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40022000 	.word	0x40022000
 8003514:	40021000 	.word	0x40021000
 8003518:	080061bc 	.word	0x080061bc
 800351c:	20000008 	.word	0x20000008
 8003520:	2000000c 	.word	0x2000000c

08003524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800353e:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d002      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x30>
 800354e:	2b08      	cmp	r3, #8
 8003550:	d003      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x36>
 8003552:	e027      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003554:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003556:	613b      	str	r3, [r7, #16]
      break;
 8003558:	e027      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	0c9b      	lsrs	r3, r3, #18
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	4a17      	ldr	r2, [pc, #92]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003564:	5cd3      	ldrb	r3, [r2, r3]
 8003566:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003572:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c5b      	lsrs	r3, r3, #17
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	4a11      	ldr	r2, [pc, #68]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a0d      	ldr	r2, [pc, #52]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003586:	fb03 f202 	mul.w	r2, r3, r2
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e004      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0c      	ldr	r2, [pc, #48]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	613b      	str	r3, [r7, #16]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <HAL_RCC_GetSysClockFreq+0xa8>)
 80035a6:	613b      	str	r3, [r7, #16]
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	693b      	ldr	r3, [r7, #16]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	080061d4 	.word	0x080061d4
 80035c4:	080061e4 	.word	0x080061e4
 80035c8:	003d0900 	.word	0x003d0900
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b02      	ldr	r3, [pc, #8]	@ (80035e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	20000008 	.word	0x20000008

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff2 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	@ (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	080061cc 	.word	0x080061cc

0800360c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	220f      	movs	r2, #15
 800361a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCC_GetClockConfig+0x58>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003628:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <HAL_RCC_GetClockConfig+0x58>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_RCC_GetClockConfig+0x58>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003640:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_RCC_GetClockConfig+0x58>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0207 	and.w	r2, r3, #7
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40021000 	.word	0x40021000
 8003668:	40022000 	.word	0x40022000

0800366c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <RCC_Delay+0x34>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <RCC_Delay+0x38>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a5b      	lsrs	r3, r3, #9
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003688:	bf00      	nop
  }
  while (Delay --);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	60fa      	str	r2, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f9      	bne.n	8003688 <RCC_Delay+0x1c>
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000008 	.word	0x20000008
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e076      	b.n	80037a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ca:	d009      	beq.n	80036e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	61da      	str	r2, [r3, #28]
 80036d2:	e005      	b.n	80036e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fd08 	bl	8001110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003764:	ea42 0103 	orr.w	r1, r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	0c1a      	lsrs	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 0204 	and.w	r2, r2, #4
 8003786:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003796:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e01a      	b.n	80037f8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd fd38 	bl	8001250 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003814:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d00c      	beq.n	800383c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003828:	d106      	bne.n	8003838 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <HAL_SPI_TransmitReceive_DMA+0x38>
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d001      	beq.n	800383c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
 800383a:	e0cf      	b.n	80039dc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0c4      	b.n	80039dc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_SPI_TransmitReceive_DMA+0x60>
 800385c:	2302      	movs	r3, #2
 800385e:	e0bd      	b.n	80039dc <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b04      	cmp	r3, #4
 8003872:	d003      	beq.n	800387c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2205      	movs	r2, #5
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	887a      	ldrh	r2, [r7, #2]
 8003892:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	887a      	ldrh	r2, [r7, #2]
 800389e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d108      	bne.n	80038d0 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	4a48      	ldr	r2, [pc, #288]	@ (80039e4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80038c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	4a47      	ldr	r2, [pc, #284]	@ (80039e8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80038cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ce:	e007      	b.n	80038e0 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	4a45      	ldr	r2, [pc, #276]	@ (80039ec <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80038d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038dc:	4a44      	ldr	r2, [pc, #272]	@ (80039f0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e4:	4a43      	ldr	r2, [pc, #268]	@ (80039f4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	2200      	movs	r2, #0
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	4619      	mov	r1, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003906:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003908:	f7fe fe48 	bl	800259c <HAL_DMA_Start_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	f043 0210 	orr.w	r2, r3, #16
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e058      	b.n	80039dc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393e:	2200      	movs	r2, #0
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	2200      	movs	r2, #0
 8003948:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003956:	2200      	movs	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	4619      	mov	r1, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	330c      	adds	r3, #12
 800396a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003970:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003972:	f7fe fe13 	bl	800259c <HAL_DMA_Start_IT>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	f043 0210 	orr.w	r2, r3, #16
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e023      	b.n	80039dc <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b40      	cmp	r3, #64	@ 0x40
 80039a0:	d007      	beq.n	80039b2 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0220 	orr.w	r2, r2, #32
 80039c8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0202 	orr.w	r2, r2, #2
 80039d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	08003b63 	.word	0x08003b63
 80039e8:	08003a2f 	.word	0x08003a2f
 80039ec:	08003b7f 	.word	0x08003b7f
 80039f0:	08003ad5 	.word	0x08003ad5
 80039f4:	08003b9b 	.word	0x08003b9b

080039f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3c:	f7fd fdaa 	bl	8001594 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d03b      	beq.n	8003ac8 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0220 	bic.w	r2, r2, #32
 8003a5e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10d      	bne.n	8003a84 <SPI_DMAReceiveCplt+0x56>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a70:	d108      	bne.n	8003a84 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0203 	bic.w	r2, r2, #3
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	e007      	b.n	8003a94 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	2164      	movs	r1, #100	@ 0x64
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f927 	bl	8003cec <SPI_EndRxTransaction>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7fc fd0d 	bl	80004e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ac6:	e002      	b.n	8003ace <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff ff95 	bl	80039f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae2:	f7fd fd57 	bl	8001594 <HAL_GetTick>
 8003ae6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d02f      	beq.n	8003b56 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0220 	bic.w	r2, r2, #32
 8003b04:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	2164      	movs	r1, #100	@ 0x64
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f940 	bl	8003d90 <SPI_EndRxTxTransaction>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	f043 0220 	orr.w	r2, r3, #32
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0203 	bic.w	r2, r2, #3
 8003b30:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7fc fcc6 	bl	80004e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b54:	e002      	b.n	8003b5c <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7fc fce4 	bl	8000524 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff ff4a 	bl	8003a0a <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff45 	bl	8003a1c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0203 	bic.w	r2, r2, #3
 8003bb6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbc:	f043 0210 	orr.w	r2, r3, #16
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7fc fc87 	bl	80004e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bec:	f7fd fcd2 	bl	8001594 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bfc:	f7fd fcca 	bl	8001594 <HAL_GetTick>
 8003c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c02:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	015b      	lsls	r3, r3, #5
 8003c08:	0d1b      	lsrs	r3, r3, #20
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c12:	e054      	b.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d050      	beq.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c1c:	f7fd fcba 	bl	8001594 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d902      	bls.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d13d      	bne.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c4a:	d111      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c54:	d004      	beq.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5e:	d107      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c78:	d10f      	bne.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e017      	b.n	8003cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d19b      	bne.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000008 	.word	0x20000008

08003cec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d00:	d111      	bne.n	8003d26 <SPI_EndRxTransaction+0x3a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d0a:	d004      	beq.n	8003d16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d14:	d107      	bne.n	8003d26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d2e:	d117      	bne.n	8003d60 <SPI_EndRxTransaction+0x74>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d38:	d112      	bne.n	8003d60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2101      	movs	r1, #1
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff ff49 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01a      	beq.n	8003d86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e013      	b.n	8003d88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2180      	movs	r1, #128	@ 0x80
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff ff36 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e000      	b.n	8003d88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2201      	movs	r2, #1
 8003da4:	2102      	movs	r1, #2
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ff18 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e013      	b.n	8003dea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2180      	movs	r1, #128	@ 0x80
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff05 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e000      	b.n	8003dea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e041      	b.n	8003e88 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd fa41 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 fa5b 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e03a      	b.n	8003f1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	@ (8003f28 <HAL_TIM_Base_Start_IT+0x98>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x58>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed2:	d009      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x58>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <HAL_TIM_Base_Start_IT+0x9c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x58>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a13      	ldr	r2, [pc, #76]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d111      	bne.n	8003f0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d010      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0a:	e007      	b.n	8003f1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800

08003f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0202 	mvn.w	r2, #2
 8003f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f998 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f98b 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f99a 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01b      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0204 	mvn.w	r2, #4
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f972 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f965 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f974 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0208 	mvn.w	r2, #8
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f94c 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f93f 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f94e 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0210 	mvn.w	r2, #16
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2208      	movs	r2, #8
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f926 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f919 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f928 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0201 	mvn.w	r2, #1
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc ff92 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa7f 	bl	80045c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8f8 	bl	80042d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0220 	mvn.w	r2, #32
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa52 	bl	80045b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIM_ConfigClockSource+0x1c>
 800412c:	2302      	movs	r3, #2
 800412e:	e0b4      	b.n	800429a <HAL_TIM_ConfigClockSource+0x186>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800414e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004168:	d03e      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xd4>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416e:	f200 8087 	bhi.w	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004176:	f000 8086 	beq.w	8004286 <HAL_TIM_ConfigClockSource+0x172>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417e:	d87f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b70      	cmp	r3, #112	@ 0x70
 8004182:	d01a      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0xa6>
 8004184:	2b70      	cmp	r3, #112	@ 0x70
 8004186:	d87b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b60      	cmp	r3, #96	@ 0x60
 800418a:	d050      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x11a>
 800418c:	2b60      	cmp	r3, #96	@ 0x60
 800418e:	d877      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b50      	cmp	r3, #80	@ 0x50
 8004192:	d03c      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xfa>
 8004194:	2b50      	cmp	r3, #80	@ 0x50
 8004196:	d873      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d058      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x13a>
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d86f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b30      	cmp	r3, #48	@ 0x30
 80041a2:	d064      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	2b30      	cmp	r3, #48	@ 0x30
 80041a6:	d86b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d060      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d867      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d05a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	e062      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ca:	f000 f974 	bl	80044b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
      break;
 80041e6:	e04f      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f8:	f000 f95d 	bl	80044b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e03c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421a:	461a      	mov	r2, r3
 800421c:	f000 f8d4 	bl	80043c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2150      	movs	r1, #80	@ 0x50
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f92b 	bl	8004482 <TIM_ITRx_SetConfig>
      break;
 800422c:	e02c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800423a:	461a      	mov	r2, r3
 800423c:	f000 f8f2 	bl	8004424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2160      	movs	r1, #96	@ 0x60
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f91b 	bl	8004482 <TIM_ITRx_SetConfig>
      break;
 800424c:	e01c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	461a      	mov	r2, r3
 800425c:	f000 f8b4 	bl	80043c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2140      	movs	r1, #64	@ 0x40
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f90b 	bl	8004482 <TIM_ITRx_SetConfig>
      break;
 800426c:	e00c      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 f902 	bl	8004482 <TIM_ITRx_SetConfig>
      break;
 800427e:	e003      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e000      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
	...

080042ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a2f      	ldr	r2, [pc, #188]	@ (80043bc <TIM_Base_SetConfig+0xd0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00b      	beq.n	800431c <TIM_Base_SetConfig+0x30>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d007      	beq.n	800431c <TIM_Base_SetConfig+0x30>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a2c      	ldr	r2, [pc, #176]	@ (80043c0 <TIM_Base_SetConfig+0xd4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d003      	beq.n	800431c <TIM_Base_SetConfig+0x30>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a2b      	ldr	r2, [pc, #172]	@ (80043c4 <TIM_Base_SetConfig+0xd8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d108      	bne.n	800432e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a22      	ldr	r2, [pc, #136]	@ (80043bc <TIM_Base_SetConfig+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_Base_SetConfig+0x62>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0x62>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <TIM_Base_SetConfig+0xd4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <TIM_Base_SetConfig+0xd8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <TIM_Base_SetConfig+0xd0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d103      	bne.n	8004394 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f023 0201 	bic.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]
  }
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800

080043c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0201 	bic.w	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f023 030a 	bic.w	r3, r3, #10
 8004404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0210 	bic.w	r2, r3, #16
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	031b      	lsls	r3, r3, #12
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	f043 0307 	orr.w	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	021a      	lsls	r2, r3, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	431a      	orrs	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4313      	orrs	r3, r2
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	609a      	str	r2, [r3, #8]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004508:	2302      	movs	r3, #2
 800450a:	e046      	b.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a16      	ldr	r2, [pc, #88]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004558:	d009      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a10      	ldr	r2, [pc, #64]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10c      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800

080045b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e6:	2b84      	cmp	r3, #132	@ 0x84
 80045e8:	d005      	beq.n	80045f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	3303      	adds	r3, #3
 80045f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004608:	f3ef 8305 	mrs	r3, IPSR
 800460c:	607b      	str	r3, [r7, #4]
  return(result);
 800460e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004628:	f000 fb3a 	bl	8004ca0 <vTaskStartScheduler>
  
  return osOK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	bd80      	pop	{r7, pc}

08004632 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004634:	b089      	sub	sp, #36	@ 0x24
 8004636:	af04      	add	r7, sp, #16
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <osThreadCreate+0x54>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01c      	beq.n	8004686 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685c      	ldr	r4, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691e      	ldr	r6, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff ffb8 	bl	80045d4 <makeFreeRtosPriority>
 8004664:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800466e:	9202      	str	r2, [sp, #8]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	9100      	str	r1, [sp, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4632      	mov	r2, r6
 8004678:	4629      	mov	r1, r5
 800467a:	4620      	mov	r0, r4
 800467c:	f000 f961 	bl	8004942 <xTaskCreateStatic>
 8004680:	4603      	mov	r3, r0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e01c      	b.n	80046c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685c      	ldr	r4, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004692:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff9a 	bl	80045d4 <makeFreeRtosPriority>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	9200      	str	r2, [sp, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4632      	mov	r2, r6
 80046ae:	4629      	mov	r1, r5
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 f9a6 	bl	8004a02 <xTaskCreate>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d001      	beq.n	80046c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046c0:	68fb      	ldr	r3, [r7, #12]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046cc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80046de:	f7ff ff90 	bl	8004602 <inHandlerMode>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01c      	beq.n	8004722 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	f107 0208 	add.w	r2, r7, #8
 80046ee:	f107 030c 	add.w	r3, r7, #12
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	2201      	movs	r2, #1
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 ff01 	bl	8005500 <xTaskGenericNotifyFromISR>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b01      	cmp	r3, #1
 8004702:	d002      	beq.n	800470a <osSignalSet+0x3e>
      return 0x80000000;
 8004704:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004708:	e019      	b.n	800473e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <osSignalSet+0x70>
 8004710:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <osSignalSet+0x7c>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	e00c      	b.n	800473c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	f107 0308 	add.w	r3, r7, #8
 8004728:	2201      	movs	r2, #1
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fe26 	bl	800537c <xTaskGenericNotify>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d002      	beq.n	800473c <osSignalSet+0x70>
    return 0x80000000;
 8004736:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800473a:	e000      	b.n	800473e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800473c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b089      	sub	sp, #36	@ 0x24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d103      	bne.n	8004770 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	e009      	b.n	8004784 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <osSignalWait+0x38>
      ticks = 1;
 8004780:	2301      	movs	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8004784:	f7ff ff3d 	bl	8004602 <inHandlerMode>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800478e:	2382      	movs	r3, #130	@ 0x82
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e01b      	b.n	80047cc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	f107 0310 	add.w	r3, r7, #16
 800479a:	1d1a      	adds	r2, r3, #4
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	2000      	movs	r0, #0
 80047a0:	f000 fd8c 	bl	80052bc <xTaskNotifyWait>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d008      	beq.n	80047bc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <osSignalWait+0x6a>
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	e00a      	b.n	80047cc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80047b6:	2340      	movs	r3, #64	@ 0x40
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	e007      	b.n	80047cc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da02      	bge.n	80047c8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80047c2:	2386      	movs	r3, #134	@ 0x86
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	e001      	b.n	80047cc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80047c8:	2308      	movs	r3, #8
 80047ca:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	461c      	mov	r4, r3
 80047d0:	f107 0310 	add.w	r3, r7, #16
 80047d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	3724      	adds	r7, #36	@ 0x24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd90      	pop	{r4, r7, pc}

080047e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0208 	add.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295
 80047fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0208 	add.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f103 0208 	add.w	r2, r3, #8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d103      	bne.n	80048a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e00c      	b.n	80048ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3308      	adds	r3, #8
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e002      	b.n	80048ae <vListInsert+0x2e>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d2f6      	bcs.n	80048a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6892      	ldr	r2, [r2, #8]
 8004906:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6852      	ldr	r2, [r2, #4]
 8004910:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d103      	bne.n	8004924 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	1e5a      	subs	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004942:	b580      	push	{r7, lr}
 8004944:	b08e      	sub	sp, #56	@ 0x38
 8004946:	af04      	add	r7, sp, #16
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10b      	bne.n	800496e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	e7fd      	b.n	800496a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800496e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61fb      	str	r3, [r7, #28]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800498c:	23a0      	movs	r3, #160	@ 0xa0
 800498e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2ba0      	cmp	r3, #160	@ 0xa0
 8004994:	d00b      	beq.n	80049ae <xTaskCreateStatic+0x6c>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	61bb      	str	r3, [r7, #24]
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	e7fd      	b.n	80049aa <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01e      	beq.n	80049f4 <xTaskCreateStatic+0xb2>
 80049b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049c4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049ce:	2300      	movs	r3, #0
 80049d0:	9303      	str	r3, [sp, #12]
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	9302      	str	r3, [sp, #8]
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f850 	bl	8004a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049ee:	f000 f8ed 	bl	8004bcc <prvAddNewTaskToReadyList>
 80049f2:	e001      	b.n	80049f8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049f8:	697b      	ldr	r3, [r7, #20]
	}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3728      	adds	r7, #40	@ 0x28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b08c      	sub	sp, #48	@ 0x30
 8004a06:	af04      	add	r7, sp, #16
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f8b2 	bl	8005b80 <pvPortMalloc>
 8004a1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a24:	20a0      	movs	r0, #160	@ 0xa0
 8004a26:	f001 f8ab 	bl	8005b80 <pvPortMalloc>
 8004a2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a38:	e005      	b.n	8004a46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f001 f96e 	bl	8005d1c <vPortFree>
 8004a40:	e001      	b.n	8004a46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d017      	beq.n	8004a7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a54:	88fa      	ldrh	r2, [r7, #6]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9303      	str	r3, [sp, #12]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	9302      	str	r3, [sp, #8]
 8004a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f80e 	bl	8004a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a70:	69f8      	ldr	r0, [r7, #28]
 8004a72:	f000 f8ab 	bl	8004bcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	e002      	b.n	8004a82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a82:	69bb      	ldr	r3, [r7, #24]
	}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f023 0307 	bic.w	r3, r3, #7
 8004ab2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	617b      	str	r3, [r7, #20]
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	e7fd      	b.n	8004ad2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01f      	beq.n	8004b1c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	e012      	b.n	8004b08 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	7819      	ldrb	r1, [r3, #0]
 8004aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	3334      	adds	r3, #52	@ 0x34
 8004af2:	460a      	mov	r2, r1
 8004af4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d006      	beq.n	8004b10 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	d9e9      	bls.n	8004ae2 <prvInitialiseNewTask+0x56>
 8004b0e:	e000      	b.n	8004b12 <prvInitialiseNewTask+0x86>
			{
				break;
 8004b10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b1a:	e003      	b.n	8004b24 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d901      	bls.n	8004b2e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b2a:	2306      	movs	r3, #6
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	3304      	adds	r3, #4
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fe6c 	bl	8004822 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fe67 	bl	8004822 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5c:	f1c3 0207 	rsb	r2, r3, #7
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	334c      	adds	r3, #76	@ 0x4c
 8004b7e:	224c      	movs	r2, #76	@ 0x4c
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 f9e8 	bl	8005f58 <memset>
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc0 <prvInitialiseNewTask+0x134>)
 8004b8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <prvInitialiseNewTask+0x138>)
 8004b92:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc8 <prvInitialiseNewTask+0x13c>)
 8004b98:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	69b8      	ldr	r0, [r7, #24]
 8004ba0:	f000 fdfa 	bl	8005798 <pxPortInitialiseStack>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200013e0 	.word	0x200013e0
 8004bc4:	20001448 	.word	0x20001448
 8004bc8:	200014b0 	.word	0x200014b0

08004bcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bd4:	f000 fed2 	bl	800597c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c84 <prvAddNewTaskToReadyList+0xb8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	4a29      	ldr	r2, [pc, #164]	@ (8004c84 <prvAddNewTaskToReadyList+0xb8>)
 8004be0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004be2:	4b29      	ldr	r3, [pc, #164]	@ (8004c88 <prvAddNewTaskToReadyList+0xbc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bea:	4a27      	ldr	r2, [pc, #156]	@ (8004c88 <prvAddNewTaskToReadyList+0xbc>)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bf0:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <prvAddNewTaskToReadyList+0xb8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d110      	bne.n	8004c1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bf8:	f000 fa9c 	bl	8005134 <prvInitialiseTaskLists>
 8004bfc:	e00d      	b.n	8004c1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bfe:	4b23      	ldr	r3, [pc, #140]	@ (8004c8c <prvAddNewTaskToReadyList+0xc0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c06:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <prvAddNewTaskToReadyList+0xbc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d802      	bhi.n	8004c1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c14:	4a1c      	ldr	r2, [pc, #112]	@ (8004c88 <prvAddNewTaskToReadyList+0xbc>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <prvAddNewTaskToReadyList+0xc4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4a1b      	ldr	r2, [pc, #108]	@ (8004c90 <prvAddNewTaskToReadyList+0xc4>)
 8004c22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	2201      	movs	r2, #1
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <prvAddNewTaskToReadyList+0xc8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <prvAddNewTaskToReadyList+0xc8>)
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4a15      	ldr	r2, [pc, #84]	@ (8004c98 <prvAddNewTaskToReadyList+0xcc>)
 8004c44:	441a      	add	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7ff fdf4 	bl	800483a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c52:	f000 fec3 	bl	80059dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c56:	4b0d      	ldr	r3, [pc, #52]	@ (8004c8c <prvAddNewTaskToReadyList+0xc0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00e      	beq.n	8004c7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <prvAddNewTaskToReadyList+0xbc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d207      	bcs.n	8004c7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <prvAddNewTaskToReadyList+0xd0>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	2000078c 	.word	0x2000078c
 8004c88:	2000068c 	.word	0x2000068c
 8004c8c:	20000798 	.word	0x20000798
 8004c90:	200007a8 	.word	0x200007a8
 8004c94:	20000794 	.word	0x20000794
 8004c98:	20000690 	.word	0x20000690
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cae:	463a      	mov	r2, r7
 8004cb0:	1d39      	adds	r1, r7, #4
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb fa4a 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	9202      	str	r2, [sp, #8]
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	460a      	mov	r2, r1
 8004cce:	4921      	ldr	r1, [pc, #132]	@ (8004d54 <vTaskStartScheduler+0xb4>)
 8004cd0:	4821      	ldr	r0, [pc, #132]	@ (8004d58 <vTaskStartScheduler+0xb8>)
 8004cd2:	f7ff fe36 	bl	8004942 <xTaskCreateStatic>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4a20      	ldr	r2, [pc, #128]	@ (8004d5c <vTaskStartScheduler+0xbc>)
 8004cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <vTaskStartScheduler+0xbc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e001      	b.n	8004cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d11b      	bne.n	8004d2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	613b      	str	r3, [r7, #16]
}
 8004d06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d08:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <vTaskStartScheduler+0xc0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	334c      	adds	r3, #76	@ 0x4c
 8004d0e:	4a15      	ldr	r2, [pc, #84]	@ (8004d64 <vTaskStartScheduler+0xc4>)
 8004d10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d12:	4b15      	ldr	r3, [pc, #84]	@ (8004d68 <vTaskStartScheduler+0xc8>)
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295
 8004d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <vTaskStartScheduler+0xcc>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d20:	4b13      	ldr	r3, [pc, #76]	@ (8004d70 <vTaskStartScheduler+0xd0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d26:	f000 fdb7 	bl	8005898 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d2a:	e00f      	b.n	8004d4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d10b      	bne.n	8004d4c <vTaskStartScheduler+0xac>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60fb      	str	r3, [r7, #12]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <vTaskStartScheduler+0xa8>
}
 8004d4c:	bf00      	nop
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	080061b4 	.word	0x080061b4
 8004d58:	08005105 	.word	0x08005105
 8004d5c:	200007b0 	.word	0x200007b0
 8004d60:	2000068c 	.word	0x2000068c
 8004d64:	20000018 	.word	0x20000018
 8004d68:	200007ac 	.word	0x200007ac
 8004d6c:	20000798 	.word	0x20000798
 8004d70:	20000790 	.word	0x20000790

08004d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d78:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <vTaskSuspendAll+0x18>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a03      	ldr	r2, [pc, #12]	@ (8004d8c <vTaskSuspendAll+0x18>)
 8004d80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	200007b4 	.word	0x200007b4

08004d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d9e:	4b42      	ldr	r3, [pc, #264]	@ (8004ea8 <xTaskResumeAll+0x118>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <xTaskResumeAll+0x2e>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	603b      	str	r3, [r7, #0]
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	e7fd      	b.n	8004dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dbe:	f000 fddd 	bl	800597c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dc2:	4b39      	ldr	r3, [pc, #228]	@ (8004ea8 <xTaskResumeAll+0x118>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	4a37      	ldr	r2, [pc, #220]	@ (8004ea8 <xTaskResumeAll+0x118>)
 8004dca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dcc:	4b36      	ldr	r3, [pc, #216]	@ (8004ea8 <xTaskResumeAll+0x118>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d161      	bne.n	8004e98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dd4:	4b35      	ldr	r3, [pc, #212]	@ (8004eac <xTaskResumeAll+0x11c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d05d      	beq.n	8004e98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ddc:	e02e      	b.n	8004e3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dde:	4b34      	ldr	r3, [pc, #208]	@ (8004eb0 <xTaskResumeAll+0x120>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3318      	adds	r3, #24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fd80 	bl	80048f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fd7b 	bl	80048f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	2201      	movs	r2, #1
 8004e00:	409a      	lsls	r2, r3
 8004e02:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb4 <xTaskResumeAll+0x124>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb4 <xTaskResumeAll+0x124>)
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4a27      	ldr	r2, [pc, #156]	@ (8004eb8 <xTaskResumeAll+0x128>)
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f7ff fd09 	bl	800483a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <xTaskResumeAll+0x12c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e36:	4b22      	ldr	r3, [pc, #136]	@ (8004ec0 <xTaskResumeAll+0x130>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb0 <xTaskResumeAll+0x120>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1cc      	bne.n	8004dde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e4a:	f000 fa17 	bl	800527c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec4 <xTaskResumeAll+0x134>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d010      	beq.n	8004e7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e5a:	f000 f837 	bl	8004ecc <xTaskIncrementTick>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e64:	4b16      	ldr	r3, [pc, #88]	@ (8004ec0 <xTaskResumeAll+0x130>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f1      	bne.n	8004e5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e76:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <xTaskResumeAll+0x134>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <xTaskResumeAll+0x130>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <xTaskResumeAll+0x138>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e98:	f000 fda0 	bl	80059dc <vPortExitCritical>

	return xAlreadyYielded;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	200007b4 	.word	0x200007b4
 8004eac:	2000078c 	.word	0x2000078c
 8004eb0:	2000074c 	.word	0x2000074c
 8004eb4:	20000794 	.word	0x20000794
 8004eb8:	20000690 	.word	0x20000690
 8004ebc:	2000068c 	.word	0x2000068c
 8004ec0:	200007a0 	.word	0x200007a0
 8004ec4:	2000079c 	.word	0x2000079c
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8005014 <xTaskIncrementTick+0x148>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f040 808f 	bne.w	8004ffe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8005018 <xTaskIncrementTick+0x14c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8005018 <xTaskIncrementTick+0x14c>)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d121      	bne.n	8004f38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ef4:	4b49      	ldr	r3, [pc, #292]	@ (800501c <xTaskIncrementTick+0x150>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	603b      	str	r3, [r7, #0]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <xTaskIncrementTick+0x46>
 8004f16:	4b41      	ldr	r3, [pc, #260]	@ (800501c <xTaskIncrementTick+0x150>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	4b40      	ldr	r3, [pc, #256]	@ (8005020 <xTaskIncrementTick+0x154>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3e      	ldr	r2, [pc, #248]	@ (800501c <xTaskIncrementTick+0x150>)
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4a3e      	ldr	r2, [pc, #248]	@ (8005020 <xTaskIncrementTick+0x154>)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005024 <xTaskIncrementTick+0x158>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	4a3c      	ldr	r2, [pc, #240]	@ (8005024 <xTaskIncrementTick+0x158>)
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	f000 f9a2 	bl	800527c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f38:	4b3b      	ldr	r3, [pc, #236]	@ (8005028 <xTaskIncrementTick+0x15c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d348      	bcc.n	8004fd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f42:	4b36      	ldr	r3, [pc, #216]	@ (800501c <xTaskIncrementTick+0x150>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4c:	4b36      	ldr	r3, [pc, #216]	@ (8005028 <xTaskIncrementTick+0x15c>)
 8004f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f52:	601a      	str	r2, [r3, #0]
					break;
 8004f54:	e03e      	b.n	8004fd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f56:	4b31      	ldr	r3, [pc, #196]	@ (800501c <xTaskIncrementTick+0x150>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d203      	bcs.n	8004f76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8005028 <xTaskIncrementTick+0x15c>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f74:	e02e      	b.n	8004fd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fcb8 	bl	80048f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	3318      	adds	r3, #24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fcaf 	bl	80048f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	2201      	movs	r2, #1
 8004f98:	409a      	lsls	r2, r3
 8004f9a:	4b24      	ldr	r3, [pc, #144]	@ (800502c <xTaskIncrementTick+0x160>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	4a22      	ldr	r2, [pc, #136]	@ (800502c <xTaskIncrementTick+0x160>)
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8005030 <xTaskIncrementTick+0x164>)
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7ff fc3d 	bl	800483a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <xTaskIncrementTick+0x168>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d3b9      	bcc.n	8004f42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fd2:	e7b6      	b.n	8004f42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fd4:	4b17      	ldr	r3, [pc, #92]	@ (8005034 <xTaskIncrementTick+0x168>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fda:	4915      	ldr	r1, [pc, #84]	@ (8005030 <xTaskIncrementTick+0x164>)
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d901      	bls.n	8004ff0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ff0:	4b11      	ldr	r3, [pc, #68]	@ (8005038 <xTaskIncrementTick+0x16c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e004      	b.n	8005008 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800503c <xTaskIncrementTick+0x170>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	4a0d      	ldr	r2, [pc, #52]	@ (800503c <xTaskIncrementTick+0x170>)
 8005006:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005008:	697b      	ldr	r3, [r7, #20]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	200007b4 	.word	0x200007b4
 8005018:	20000790 	.word	0x20000790
 800501c:	20000744 	.word	0x20000744
 8005020:	20000748 	.word	0x20000748
 8005024:	200007a4 	.word	0x200007a4
 8005028:	200007ac 	.word	0x200007ac
 800502c:	20000794 	.word	0x20000794
 8005030:	20000690 	.word	0x20000690
 8005034:	2000068c 	.word	0x2000068c
 8005038:	200007a0 	.word	0x200007a0
 800503c:	2000079c 	.word	0x2000079c

08005040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005046:	4b29      	ldr	r3, [pc, #164]	@ (80050ec <vTaskSwitchContext+0xac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800504e:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <vTaskSwitchContext+0xb0>)
 8005050:	2201      	movs	r2, #1
 8005052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005054:	e045      	b.n	80050e2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005056:	4b26      	ldr	r3, [pc, #152]	@ (80050f0 <vTaskSwitchContext+0xb0>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505c:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <vTaskSwitchContext+0xb4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	fab3 f383 	clz	r3, r3
 8005068:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	f1c3 031f 	rsb	r3, r3, #31
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	4921      	ldr	r1, [pc, #132]	@ (80050f8 <vTaskSwitchContext+0xb8>)
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	607b      	str	r3, [r7, #4]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <vTaskSwitchContext+0x5a>
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <vTaskSwitchContext+0xb8>)
 80050aa:	4413      	add	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	3308      	adds	r3, #8
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d104      	bne.n	80050ce <vTaskSwitchContext+0x8e>
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <vTaskSwitchContext+0xbc>)
 80050d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050d8:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <vTaskSwitchContext+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	334c      	adds	r3, #76	@ 0x4c
 80050de:	4a08      	ldr	r2, [pc, #32]	@ (8005100 <vTaskSwitchContext+0xc0>)
 80050e0:	6013      	str	r3, [r2, #0]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	200007b4 	.word	0x200007b4
 80050f0:	200007a0 	.word	0x200007a0
 80050f4:	20000794 	.word	0x20000794
 80050f8:	20000690 	.word	0x20000690
 80050fc:	2000068c 	.word	0x2000068c
 8005100:	20000018 	.word	0x20000018

08005104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800510c:	f000 f852 	bl	80051b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005110:	4b06      	ldr	r3, [pc, #24]	@ (800512c <prvIdleTask+0x28>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d9f9      	bls.n	800510c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <prvIdleTask+0x2c>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005128:	e7f0      	b.n	800510c <prvIdleTask+0x8>
 800512a:	bf00      	nop
 800512c:	20000690 	.word	0x20000690
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	e00c      	b.n	800515a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <prvInitialiseTaskLists+0x60>)
 800514c:	4413      	add	r3, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fb48 	bl	80047e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3301      	adds	r3, #1
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b06      	cmp	r3, #6
 800515e:	d9ef      	bls.n	8005140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005160:	480d      	ldr	r0, [pc, #52]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005162:	f7ff fb3f 	bl	80047e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005166:	480d      	ldr	r0, [pc, #52]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005168:	f7ff fb3c 	bl	80047e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800516c:	480c      	ldr	r0, [pc, #48]	@ (80051a0 <prvInitialiseTaskLists+0x6c>)
 800516e:	f7ff fb39 	bl	80047e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005172:	480c      	ldr	r0, [pc, #48]	@ (80051a4 <prvInitialiseTaskLists+0x70>)
 8005174:	f7ff fb36 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005178:	480b      	ldr	r0, [pc, #44]	@ (80051a8 <prvInitialiseTaskLists+0x74>)
 800517a:	f7ff fb33 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <prvInitialiseTaskLists+0x78>)
 8005180:	4a05      	ldr	r2, [pc, #20]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <prvInitialiseTaskLists+0x7c>)
 8005186:	4a05      	ldr	r2, [pc, #20]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000690 	.word	0x20000690
 8005198:	2000071c 	.word	0x2000071c
 800519c:	20000730 	.word	0x20000730
 80051a0:	2000074c 	.word	0x2000074c
 80051a4:	20000760 	.word	0x20000760
 80051a8:	20000778 	.word	0x20000778
 80051ac:	20000744 	.word	0x20000744
 80051b0:	20000748 	.word	0x20000748

080051b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ba:	e019      	b.n	80051f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051bc:	f000 fbde 	bl	800597c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <prvCheckTasksWaitingTermination+0x50>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fb8f 	bl	80048f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051e6:	f000 fbf9 	bl	80059dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f810 	bl	8005210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e1      	bne.n	80051bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000760 	.word	0x20000760
 8005208:	2000078c 	.word	0x2000078c
 800520c:	20000774 	.word	0x20000774

08005210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	334c      	adds	r3, #76	@ 0x4c
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fea3 	bl	8005f68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fd73 	bl	8005d1c <vPortFree>
				vPortFree( pxTCB );
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fd70 	bl	8005d1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800523c:	e019      	b.n	8005272 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005244:	2b01      	cmp	r3, #1
 8005246:	d103      	bne.n	8005250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fd67 	bl	8005d1c <vPortFree>
	}
 800524e:	e010      	b.n	8005272 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005256:	2b02      	cmp	r3, #2
 8005258:	d00b      	beq.n	8005272 <prvDeleteTCB+0x62>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	60fb      	str	r3, [r7, #12]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <prvDeleteTCB+0x5e>
	}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005282:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <prvResetNextTaskUnblockTime+0x38>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <prvResetNextTaskUnblockTime+0x3c>)
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005294:	e008      	b.n	80052a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <prvResetNextTaskUnblockTime+0x38>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <prvResetNextTaskUnblockTime+0x3c>)
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000744 	.word	0x20000744
 80052b8:	200007ac 	.word	0x200007ac

080052bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80052ca:	f000 fb57 	bl	800597c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80052ce:	4b29      	ldr	r3, [pc, #164]	@ (8005374 <xTaskNotifyWait+0xb8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d01c      	beq.n	8005316 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80052dc:	4b25      	ldr	r3, [pc, #148]	@ (8005374 <xTaskNotifyWait+0xb8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	43d2      	mvns	r2, r2
 80052e8:	400a      	ands	r2, r1
 80052ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80052ee:	4b21      	ldr	r3, [pc, #132]	@ (8005374 <xTaskNotifyWait+0xb8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052fe:	2101      	movs	r1, #1
 8005300:	6838      	ldr	r0, [r7, #0]
 8005302:	f000 f9e3 	bl	80056cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005306:	4b1c      	ldr	r3, [pc, #112]	@ (8005378 <xTaskNotifyWait+0xbc>)
 8005308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005316:	f000 fb61 	bl	80059dc <vPortExitCritical>

		taskENTER_CRITICAL();
 800531a:	f000 fb2f 	bl	800597c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005324:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <xTaskNotifyWait+0xb8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005330:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <xTaskNotifyWait+0xb8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d002      	beq.n	8005344 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e00a      	b.n	800535a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005344:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <xTaskNotifyWait+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	43d2      	mvns	r2, r2
 8005350:	400a      	ands	r2, r1
 8005352:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800535a:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <xTaskNotifyWait+0xb8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8005364:	f000 fb3a 	bl	80059dc <vPortExitCritical>

		return xReturn;
 8005368:	697b      	ldr	r3, [r7, #20]
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	2000068c 	.word	0x2000068c
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	@ 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800538c:	2301      	movs	r3, #1
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <xTaskGenericNotify+0x32>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	61bb      	str	r3, [r7, #24]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80053b2:	f000 fae3 	bl	800597c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80053cc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d82e      	bhi.n	800543a <xTaskGenericNotify+0xbe>
 80053dc:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <xTaskGenericNotify+0x68>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	0800545f 	.word	0x0800545f
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	0800540b 	.word	0x0800540b
 80053f0:	0800541b 	.word	0x0800541b
 80053f4:	08005425 	.word	0x08005425
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	431a      	orrs	r2, r3
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005408:	e02c      	b.n	8005464 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005418:	e024      	b.n	8005464 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005422:	e01f      	b.n	8005464 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005424:	7ffb      	ldrb	r3, [r7, #31]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d004      	beq.n	8005434 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005432:	e017      	b.n	8005464 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8005434:	2300      	movs	r3, #0
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8005438:	e014      	b.n	8005464 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d00d      	beq.n	8005462 <xTaskGenericNotify+0xe6>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	617b      	str	r3, [r7, #20]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <xTaskGenericNotify+0xde>
					break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <xTaskGenericNotify+0xe8>

					break;
 8005462:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005464:	7ffb      	ldrb	r3, [r7, #31]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d13a      	bne.n	80054e0 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	3304      	adds	r3, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fa3e 	bl	80048f0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	2201      	movs	r2, #1
 800547a:	409a      	lsls	r2, r3
 800547c:	4b1c      	ldr	r3, [pc, #112]	@ (80054f0 <xTaskGenericNotify+0x174>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4313      	orrs	r3, r2
 8005482:	4a1b      	ldr	r2, [pc, #108]	@ (80054f0 <xTaskGenericNotify+0x174>)
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4a18      	ldr	r2, [pc, #96]	@ (80054f4 <xTaskGenericNotify+0x178>)
 8005494:	441a      	add	r2, r3
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	3304      	adds	r3, #4
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f7ff f9cc 	bl	800483a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <xTaskGenericNotify+0x146>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	613b      	str	r3, [r7, #16]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <xTaskGenericNotify+0x17c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d907      	bls.n	80054e0 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80054d0:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <xTaskGenericNotify+0x180>)
 80054d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80054e0:	f000 fa7c 	bl	80059dc <vPortExitCritical>

		return xReturn;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3728      	adds	r7, #40	@ 0x28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000794 	.word	0x20000794
 80054f4:	20000690 	.word	0x20000690
 80054f8:	2000068c 	.word	0x2000068c
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08e      	sub	sp, #56	@ 0x38
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005510:	2301      	movs	r3, #1
 8005512:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005532:	f000 fae5 	bl	8005b00 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800553a:	f3ef 8211 	mrs	r2, BASEPRI
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	623a      	str	r2, [r7, #32]
 8005550:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005552:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800556c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	2202      	movs	r2, #2
 8005574:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d82e      	bhi.n	80055dc <xTaskGenericNotifyFromISR+0xdc>
 800557e:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <xTaskGenericNotifyFromISR+0x84>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	08005601 	.word	0x08005601
 8005588:	08005599 	.word	0x08005599
 800558c:	080055ab 	.word	0x080055ab
 8005590:	080055bb 	.word	0x080055bb
 8005594:	080055c5 	.word	0x080055c5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80055a8:	e02d      	b.n	8005606 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80055b8:	e025      	b.n	8005606 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80055c2:	e020      	b.n	8005606 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80055c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d004      	beq.n	80055d6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80055d4:	e017      	b.n	8005606 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80055da:	e014      	b.n	8005606 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d00d      	beq.n	8005604 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	61bb      	str	r3, [r7, #24]
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <xTaskGenericNotifyFromISR+0x106>
					break;
 8005604:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005606:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800560a:	2b01      	cmp	r3, #1
 800560c:	d146      	bne.n	800569c <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	617b      	str	r3, [r7, #20]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800562e:	4b21      	ldr	r3, [pc, #132]	@ (80056b4 <xTaskGenericNotifyFromISR+0x1b4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d11c      	bne.n	8005670 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005638:	3304      	adds	r3, #4
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f958 	bl	80048f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	2201      	movs	r2, #1
 8005646:	409a      	lsls	r2, r3
 8005648:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <xTaskGenericNotifyFromISR+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	4a1a      	ldr	r2, [pc, #104]	@ (80056b8 <xTaskGenericNotifyFromISR+0x1b8>)
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <xTaskGenericNotifyFromISR+0x1bc>)
 8005660:	441a      	add	r2, r3
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7ff f8e6 	bl	800483a <vListInsertEnd>
 800566e:	e005      	b.n	800567c <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	3318      	adds	r3, #24
 8005674:	4619      	mov	r1, r3
 8005676:	4812      	ldr	r0, [pc, #72]	@ (80056c0 <xTaskGenericNotifyFromISR+0x1c0>)
 8005678:	f7ff f8df 	bl	800483a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005680:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <xTaskGenericNotifyFromISR+0x1c4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	429a      	cmp	r2, r3
 8005688:	d908      	bls.n	800569c <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800568a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005696:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <xTaskGenericNotifyFromISR+0x1c8>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056a6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80056a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3738      	adds	r7, #56	@ 0x38
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200007b4 	.word	0x200007b4
 80056b8:	20000794 	.word	0x20000794
 80056bc:	20000690 	.word	0x20000690
 80056c0:	2000074c 	.word	0x2000074c
 80056c4:	2000068c 	.word	0x2000068c
 80056c8:	200007a0 	.word	0x200007a0

080056cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056d6:	4b29      	ldr	r3, [pc, #164]	@ (800577c <prvAddCurrentTaskToDelayedList+0xb0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056dc:	4b28      	ldr	r3, [pc, #160]	@ (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f904 	bl	80048f0 <uxListRemove>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056ee:	4b24      	ldr	r3, [pc, #144]	@ (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	2201      	movs	r2, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43da      	mvns	r2, r3
 80056fc:	4b21      	ldr	r3, [pc, #132]	@ (8005784 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4013      	ands	r3, r2
 8005702:	4a20      	ldr	r2, [pc, #128]	@ (8005784 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005704:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d10a      	bne.n	8005724 <prvAddCurrentTaskToDelayedList+0x58>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005714:	4b1a      	ldr	r3, [pc, #104]	@ (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	481a      	ldr	r0, [pc, #104]	@ (8005788 <prvAddCurrentTaskToDelayedList+0xbc>)
 800571e:	f7ff f88c 	bl	800483a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005722:	e026      	b.n	8005772 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800572c:	4b14      	ldr	r3, [pc, #80]	@ (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d209      	bcs.n	8005750 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800573c:	4b13      	ldr	r3, [pc, #76]	@ (800578c <prvAddCurrentTaskToDelayedList+0xc0>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b0f      	ldr	r3, [pc, #60]	@ (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f7ff f899 	bl	8004880 <vListInsert>
}
 800574e:	e010      	b.n	8005772 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005750:	4b0f      	ldr	r3, [pc, #60]	@ (8005790 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f7ff f88f 	bl	8004880 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d202      	bcs.n	8005772 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800576c:	4a09      	ldr	r2, [pc, #36]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xc8>)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6013      	str	r3, [r2, #0]
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000790 	.word	0x20000790
 8005780:	2000068c 	.word	0x2000068c
 8005784:	20000794 	.word	0x20000794
 8005788:	20000778 	.word	0x20000778
 800578c:	20000748 	.word	0x20000748
 8005790:	20000744 	.word	0x20000744
 8005794:	200007ac 	.word	0x200007ac

08005798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b04      	subs	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b04      	subs	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b04      	subs	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057c8:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <pxPortInitialiseStack+0x54>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3b14      	subs	r3, #20
 80057d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3b20      	subs	r3, #32
 80057de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057e0:	68fb      	ldr	r3, [r7, #12]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	080057f1 	.word	0x080057f1

080057f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057fa:	4b12      	ldr	r3, [pc, #72]	@ (8005844 <prvTaskExitError+0x54>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d00b      	beq.n	800581c <prvTaskExitError+0x2c>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	60fb      	str	r3, [r7, #12]
}
 8005816:	bf00      	nop
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <prvTaskExitError+0x28>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60bb      	str	r3, [r7, #8]
}
 800582e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005830:	bf00      	nop
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0fc      	beq.n	8005832 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	20000014 	.word	0x20000014
	...

08005850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005850:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <pxCurrentTCBConst2>)
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	6808      	ldr	r0, [r1, #0]
 8005856:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800585a:	f380 8809 	msr	PSP, r0
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8811 	msr	BASEPRI, r0
 800586a:	f04e 0e0d 	orr.w	lr, lr, #13
 800586e:	4770      	bx	lr

08005870 <pxCurrentTCBConst2>:
 8005870:	2000068c 	.word	0x2000068c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005878:	4806      	ldr	r0, [pc, #24]	@ (8005894 <prvPortStartFirstTask+0x1c>)
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	6800      	ldr	r0, [r0, #0]
 800587e:	f380 8808 	msr	MSP, r0
 8005882:	b662      	cpsie	i
 8005884:	b661      	cpsie	f
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	df00      	svc	0
 8005890:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005892:	bf00      	nop
 8005894:	e000ed08 	.word	0xe000ed08

08005898 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800589e:	4b32      	ldr	r3, [pc, #200]	@ (8005968 <xPortStartScheduler+0xd0>)
 80058a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	22ff      	movs	r2, #255	@ 0xff
 80058ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	4b2a      	ldr	r3, [pc, #168]	@ (800596c <xPortStartScheduler+0xd4>)
 80058c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005970 <xPortStartScheduler+0xd8>)
 80058c8:	2207      	movs	r2, #7
 80058ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058cc:	e009      	b.n	80058e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80058ce:	4b28      	ldr	r3, [pc, #160]	@ (8005970 <xPortStartScheduler+0xd8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	4a26      	ldr	r2, [pc, #152]	@ (8005970 <xPortStartScheduler+0xd8>)
 80058d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ea:	2b80      	cmp	r3, #128	@ 0x80
 80058ec:	d0ef      	beq.n	80058ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058ee:	4b20      	ldr	r3, [pc, #128]	@ (8005970 <xPortStartScheduler+0xd8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f1c3 0307 	rsb	r3, r3, #7
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d00b      	beq.n	8005912 <xPortStartScheduler+0x7a>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	60bb      	str	r3, [r7, #8]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005912:	4b17      	ldr	r3, [pc, #92]	@ (8005970 <xPortStartScheduler+0xd8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <xPortStartScheduler+0xd8>)
 800591a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800591c:	4b14      	ldr	r3, [pc, #80]	@ (8005970 <xPortStartScheduler+0xd8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005924:	4a12      	ldr	r2, [pc, #72]	@ (8005970 <xPortStartScheduler+0xd8>)
 8005926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005930:	4b10      	ldr	r3, [pc, #64]	@ (8005974 <xPortStartScheduler+0xdc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a0f      	ldr	r2, [pc, #60]	@ (8005974 <xPortStartScheduler+0xdc>)
 8005936:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800593a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800593c:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <xPortStartScheduler+0xdc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a0c      	ldr	r2, [pc, #48]	@ (8005974 <xPortStartScheduler+0xdc>)
 8005942:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005948:	f000 f8b8 	bl	8005abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800594c:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <xPortStartScheduler+0xe0>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005952:	f7ff ff91 	bl	8005878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005956:	f7ff fb73 	bl	8005040 <vTaskSwitchContext>
	prvTaskExitError();
 800595a:	f7ff ff49 	bl	80057f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e000e400 	.word	0xe000e400
 800596c:	200007b8 	.word	0x200007b8
 8005970:	200007bc 	.word	0x200007bc
 8005974:	e000ed20 	.word	0xe000ed20
 8005978:	20000014 	.word	0x20000014

0800597c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	607b      	str	r3, [r7, #4]
}
 8005994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005996:	4b0f      	ldr	r3, [pc, #60]	@ (80059d4 <vPortEnterCritical+0x58>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	4a0d      	ldr	r2, [pc, #52]	@ (80059d4 <vPortEnterCritical+0x58>)
 800599e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059a0:	4b0c      	ldr	r3, [pc, #48]	@ (80059d4 <vPortEnterCritical+0x58>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d110      	bne.n	80059ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059a8:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <vPortEnterCritical+0x5c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <vPortEnterCritical+0x4e>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	603b      	str	r3, [r7, #0]
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	e7fd      	b.n	80059c6 <vPortEnterCritical+0x4a>
	}
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	20000014 	.word	0x20000014
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059e2:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <vPortExitCritical+0x50>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <vPortExitCritical+0x26>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	607b      	str	r3, [r7, #4]
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a02:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <vPortExitCritical+0x50>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <vPortExitCritical+0x50>)
 8005a0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <vPortExitCritical+0x50>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <vPortExitCritical+0x44>
 8005a14:	2300      	movs	r3, #0
 8005a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f383 8811 	msr	BASEPRI, r3
}
 8005a1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000014 	.word	0x20000014

08005a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a30:	f3ef 8009 	mrs	r0, PSP
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <pxCurrentTCBConst>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a40:	6010      	str	r0, [r2, #0]
 8005a42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005a46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a4a:	f380 8811 	msr	BASEPRI, r0
 8005a4e:	f7ff faf7 	bl	8005040 <vTaskSwitchContext>
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f380 8811 	msr	BASEPRI, r0
 8005a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a5e:	6819      	ldr	r1, [r3, #0]
 8005a60:	6808      	ldr	r0, [r1, #0]
 8005a62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a66:	f380 8809 	msr	PSP, r0
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	4770      	bx	lr

08005a70 <pxCurrentTCBConst>:
 8005a70:	2000068c 	.word	0x2000068c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a92:	f7ff fa1b 	bl	8004ecc <xTaskIncrementTick>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <SysTick_Handler+0x40>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <vPortSetupTimerInterrupt+0x30>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005acc:	4b09      	ldr	r3, [pc, #36]	@ (8005af4 <vPortSetupTimerInterrupt+0x38>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a09      	ldr	r2, [pc, #36]	@ (8005af8 <vPortSetupTimerInterrupt+0x3c>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	4a08      	ldr	r2, [pc, #32]	@ (8005afc <vPortSetupTimerInterrupt+0x40>)
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ade:	4b03      	ldr	r3, [pc, #12]	@ (8005aec <vPortSetupTimerInterrupt+0x30>)
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr
 8005aec:	e000e010 	.word	0xe000e010
 8005af0:	e000e018 	.word	0xe000e018
 8005af4:	20000008 	.word	0x20000008
 8005af8:	10624dd3 	.word	0x10624dd3
 8005afc:	e000e014 	.word	0xe000e014

08005b00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b06:	f3ef 8305 	mrs	r3, IPSR
 8005b0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b0f      	cmp	r3, #15
 8005b10:	d915      	bls.n	8005b3e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b12:	4a17      	ldr	r2, [pc, #92]	@ (8005b70 <vPortValidateInterruptPriority+0x70>)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b1c:	4b15      	ldr	r3, [pc, #84]	@ (8005b74 <vPortValidateInterruptPriority+0x74>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	7afa      	ldrb	r2, [r7, #11]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d20b      	bcs.n	8005b3e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	607b      	str	r3, [r7, #4]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b78 <vPortValidateInterruptPriority+0x78>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b46:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <vPortValidateInterruptPriority+0x7c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d90b      	bls.n	8005b66 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	603b      	str	r3, [r7, #0]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <vPortValidateInterruptPriority+0x62>
	}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	e000e3f0 	.word	0xe000e3f0
 8005b74:	200007b8 	.word	0x200007b8
 8005b78:	e000ed0c 	.word	0xe000ed0c
 8005b7c:	200007bc 	.word	0x200007bc

08005b80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	@ 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b8c:	f7ff f8f2 	bl	8004d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b90:	4b5c      	ldr	r3, [pc, #368]	@ (8005d04 <pvPortMalloc+0x184>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b98:	f000 f924 	bl	8005de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8005d08 <pvPortMalloc+0x188>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f040 8095 	bne.w	8005cd4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01e      	beq.n	8005bee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d015      	beq.n	8005bee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f023 0307 	bic.w	r3, r3, #7
 8005bc8:	3308      	adds	r3, #8
 8005bca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <pvPortMalloc+0x6e>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	617b      	str	r3, [r7, #20]
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	e7fd      	b.n	8005bea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d06f      	beq.n	8005cd4 <pvPortMalloc+0x154>
 8005bf4:	4b45      	ldr	r3, [pc, #276]	@ (8005d0c <pvPortMalloc+0x18c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d86a      	bhi.n	8005cd4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bfe:	4b44      	ldr	r3, [pc, #272]	@ (8005d10 <pvPortMalloc+0x190>)
 8005c00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c02:	4b43      	ldr	r3, [pc, #268]	@ (8005d10 <pvPortMalloc+0x190>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c08:	e004      	b.n	8005c14 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d903      	bls.n	8005c26 <pvPortMalloc+0xa6>
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f1      	bne.n	8005c0a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c26:	4b37      	ldr	r3, [pc, #220]	@ (8005d04 <pvPortMalloc+0x184>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d051      	beq.n	8005cd4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	4413      	add	r3, r2
 8005c38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	1ad2      	subs	r2, r2, r3
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d920      	bls.n	8005c94 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4413      	add	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <pvPortMalloc+0xfc>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	613b      	str	r3, [r7, #16]
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c8e:	69b8      	ldr	r0, [r7, #24]
 8005c90:	f000 f90a 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c94:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <pvPortMalloc+0x18c>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d0c <pvPortMalloc+0x18c>)
 8005ca0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d0c <pvPortMalloc+0x18c>)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d14 <pvPortMalloc+0x194>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d203      	bcs.n	8005cb6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cae:	4b17      	ldr	r3, [pc, #92]	@ (8005d0c <pvPortMalloc+0x18c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a18      	ldr	r2, [pc, #96]	@ (8005d14 <pvPortMalloc+0x194>)
 8005cb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	4b13      	ldr	r3, [pc, #76]	@ (8005d08 <pvPortMalloc+0x188>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cca:	4b13      	ldr	r3, [pc, #76]	@ (8005d18 <pvPortMalloc+0x198>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	4a11      	ldr	r2, [pc, #68]	@ (8005d18 <pvPortMalloc+0x198>)
 8005cd2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cd4:	f7ff f85c 	bl	8004d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <pvPortMalloc+0x17a>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60fb      	str	r3, [r7, #12]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <pvPortMalloc+0x176>
	return pvReturn;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3728      	adds	r7, #40	@ 0x28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	200013c8 	.word	0x200013c8
 8005d08:	200013dc 	.word	0x200013dc
 8005d0c:	200013cc 	.word	0x200013cc
 8005d10:	200013c0 	.word	0x200013c0
 8005d14:	200013d0 	.word	0x200013d0
 8005d18:	200013d4 	.word	0x200013d4

08005d1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d04f      	beq.n	8005dce <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d2e:	2308      	movs	r3, #8
 8005d30:	425b      	negs	r3, r3
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	4b25      	ldr	r3, [pc, #148]	@ (8005dd8 <vPortFree+0xbc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <vPortFree+0x46>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	60fb      	str	r3, [r7, #12]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <vPortFree+0x66>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	60bb      	str	r3, [r7, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <vPortFree+0xbc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11a      	bne.n	8005dce <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd8 <vPortFree+0xbc>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005da8:	f7fe ffe4 	bl	8004d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <vPortFree+0xc0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	4a09      	ldr	r2, [pc, #36]	@ (8005ddc <vPortFree+0xc0>)
 8005db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dba:	6938      	ldr	r0, [r7, #16]
 8005dbc:	f000 f874 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dc0:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <vPortFree+0xc4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4a06      	ldr	r2, [pc, #24]	@ (8005de0 <vPortFree+0xc4>)
 8005dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dca:	f7fe ffe1 	bl	8004d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200013dc 	.word	0x200013dc
 8005ddc:	200013cc 	.word	0x200013cc
 8005de0:	200013d8 	.word	0x200013d8

08005de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005df0:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <prvHeapInit+0xac>)
 8005df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00c      	beq.n	8005e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <prvHeapInit+0xac>)
 8005e14:	4413      	add	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e94 <prvHeapInit+0xb0>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e22:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <prvHeapInit+0xb0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e30:	2208      	movs	r2, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a15      	ldr	r2, [pc, #84]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e46:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e4e:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <prvHeapInit+0xb4>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	@ (8005e9c <prvHeapInit+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a09      	ldr	r2, [pc, #36]	@ (8005ea0 <prvHeapInit+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <prvHeapInit+0xc0>)
 8005e7e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	200007c0 	.word	0x200007c0
 8005e94:	200013c0 	.word	0x200013c0
 8005e98:	200013c8 	.word	0x200013c8
 8005e9c:	200013d0 	.word	0x200013d0
 8005ea0:	200013cc 	.word	0x200013cc
 8005ea4:	200013dc 	.word	0x200013dc

08005ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eb0:	4b27      	ldr	r3, [pc, #156]	@ (8005f50 <prvInsertBlockIntoFreeList+0xa8>)
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e002      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x14>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d8f7      	bhi.n	8005eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d108      	bne.n	8005eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d118      	bne.n	8005f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b14      	ldr	r3, [pc, #80]	@ (8005f54 <prvInsertBlockIntoFreeList+0xac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d00d      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e008      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f26:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <prvInsertBlockIntoFreeList+0xac>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e003      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr
 8005f50:	200013c0 	.word	0x200013c0
 8005f54:	200013c8 	.word	0x200013c8

08005f58 <memset>:
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4402      	add	r2, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <_reclaim_reent>:
 8005f68:	4b29      	ldr	r3, [pc, #164]	@ (8006010 <_reclaim_reent+0xa8>)
 8005f6a:	b570      	push	{r4, r5, r6, lr}
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4283      	cmp	r3, r0
 8005f72:	d04b      	beq.n	800600c <_reclaim_reent+0xa4>
 8005f74:	69c3      	ldr	r3, [r0, #28]
 8005f76:	b1ab      	cbz	r3, 8005fa4 <_reclaim_reent+0x3c>
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	b16b      	cbz	r3, 8005f98 <_reclaim_reent+0x30>
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	69e3      	ldr	r3, [r4, #28]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	5959      	ldr	r1, [r3, r5]
 8005f84:	2900      	cmp	r1, #0
 8005f86:	d13b      	bne.n	8006000 <_reclaim_reent+0x98>
 8005f88:	3504      	adds	r5, #4
 8005f8a:	2d80      	cmp	r5, #128	@ 0x80
 8005f8c:	d1f7      	bne.n	8005f7e <_reclaim_reent+0x16>
 8005f8e:	69e3      	ldr	r3, [r4, #28]
 8005f90:	4620      	mov	r0, r4
 8005f92:	68d9      	ldr	r1, [r3, #12]
 8005f94:	f000 f872 	bl	800607c <_free_r>
 8005f98:	69e3      	ldr	r3, [r4, #28]
 8005f9a:	6819      	ldr	r1, [r3, #0]
 8005f9c:	b111      	cbz	r1, 8005fa4 <_reclaim_reent+0x3c>
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f86c 	bl	800607c <_free_r>
 8005fa4:	6961      	ldr	r1, [r4, #20]
 8005fa6:	b111      	cbz	r1, 8005fae <_reclaim_reent+0x46>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 f867 	bl	800607c <_free_r>
 8005fae:	69e1      	ldr	r1, [r4, #28]
 8005fb0:	b111      	cbz	r1, 8005fb8 <_reclaim_reent+0x50>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f862 	bl	800607c <_free_r>
 8005fb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fba:	b111      	cbz	r1, 8005fc2 <_reclaim_reent+0x5a>
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 f85d 	bl	800607c <_free_r>
 8005fc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fc4:	b111      	cbz	r1, 8005fcc <_reclaim_reent+0x64>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 f858 	bl	800607c <_free_r>
 8005fcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fce:	b111      	cbz	r1, 8005fd6 <_reclaim_reent+0x6e>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f853 	bl	800607c <_free_r>
 8005fd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fd8:	b111      	cbz	r1, 8005fe0 <_reclaim_reent+0x78>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f84e 	bl	800607c <_free_r>
 8005fe0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fe2:	b111      	cbz	r1, 8005fea <_reclaim_reent+0x82>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 f849 	bl	800607c <_free_r>
 8005fea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005fec:	b111      	cbz	r1, 8005ff4 <_reclaim_reent+0x8c>
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 f844 	bl	800607c <_free_r>
 8005ff4:	6a23      	ldr	r3, [r4, #32]
 8005ff6:	b14b      	cbz	r3, 800600c <_reclaim_reent+0xa4>
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ffe:	4718      	bx	r3
 8006000:	680e      	ldr	r6, [r1, #0]
 8006002:	4620      	mov	r0, r4
 8006004:	f000 f83a 	bl	800607c <_free_r>
 8006008:	4631      	mov	r1, r6
 800600a:	e7bb      	b.n	8005f84 <_reclaim_reent+0x1c>
 800600c:	bd70      	pop	{r4, r5, r6, pc}
 800600e:	bf00      	nop
 8006010:	20000018 	.word	0x20000018

08006014 <__libc_init_array>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	2600      	movs	r6, #0
 8006018:	4d0c      	ldr	r5, [pc, #48]	@ (800604c <__libc_init_array+0x38>)
 800601a:	4c0d      	ldr	r4, [pc, #52]	@ (8006050 <__libc_init_array+0x3c>)
 800601c:	1b64      	subs	r4, r4, r5
 800601e:	10a4      	asrs	r4, r4, #2
 8006020:	42a6      	cmp	r6, r4
 8006022:	d109      	bne.n	8006038 <__libc_init_array+0x24>
 8006024:	f000 f87e 	bl	8006124 <_init>
 8006028:	2600      	movs	r6, #0
 800602a:	4d0a      	ldr	r5, [pc, #40]	@ (8006054 <__libc_init_array+0x40>)
 800602c:	4c0a      	ldr	r4, [pc, #40]	@ (8006058 <__libc_init_array+0x44>)
 800602e:	1b64      	subs	r4, r4, r5
 8006030:	10a4      	asrs	r4, r4, #2
 8006032:	42a6      	cmp	r6, r4
 8006034:	d105      	bne.n	8006042 <__libc_init_array+0x2e>
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	f855 3b04 	ldr.w	r3, [r5], #4
 800603c:	4798      	blx	r3
 800603e:	3601      	adds	r6, #1
 8006040:	e7ee      	b.n	8006020 <__libc_init_array+0xc>
 8006042:	f855 3b04 	ldr.w	r3, [r5], #4
 8006046:	4798      	blx	r3
 8006048:	3601      	adds	r6, #1
 800604a:	e7f2      	b.n	8006032 <__libc_init_array+0x1e>
 800604c:	080061e8 	.word	0x080061e8
 8006050:	080061e8 	.word	0x080061e8
 8006054:	080061e8 	.word	0x080061e8
 8006058:	080061ec 	.word	0x080061ec

0800605c <__retarget_lock_acquire_recursive>:
 800605c:	4770      	bx	lr

0800605e <__retarget_lock_release_recursive>:
 800605e:	4770      	bx	lr

08006060 <memcpy>:
 8006060:	440a      	add	r2, r1
 8006062:	4291      	cmp	r1, r2
 8006064:	f100 33ff 	add.w	r3, r0, #4294967295
 8006068:	d100      	bne.n	800606c <memcpy+0xc>
 800606a:	4770      	bx	lr
 800606c:	b510      	push	{r4, lr}
 800606e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006072:	4291      	cmp	r1, r2
 8006074:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006078:	d1f9      	bne.n	800606e <memcpy+0xe>
 800607a:	bd10      	pop	{r4, pc}

0800607c <_free_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4605      	mov	r5, r0
 8006080:	2900      	cmp	r1, #0
 8006082:	d040      	beq.n	8006106 <_free_r+0x8a>
 8006084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006088:	1f0c      	subs	r4, r1, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfb8      	it	lt
 800608e:	18e4      	addlt	r4, r4, r3
 8006090:	f000 f83c 	bl	800610c <__malloc_lock>
 8006094:	4a1c      	ldr	r2, [pc, #112]	@ (8006108 <_free_r+0x8c>)
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	b933      	cbnz	r3, 80060a8 <_free_r+0x2c>
 800609a:	6063      	str	r3, [r4, #4]
 800609c:	6014      	str	r4, [r2, #0]
 800609e:	4628      	mov	r0, r5
 80060a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a4:	f000 b838 	b.w	8006118 <__malloc_unlock>
 80060a8:	42a3      	cmp	r3, r4
 80060aa:	d908      	bls.n	80060be <_free_r+0x42>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	1821      	adds	r1, r4, r0
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf01      	itttt	eq
 80060b4:	6819      	ldreq	r1, [r3, #0]
 80060b6:	685b      	ldreq	r3, [r3, #4]
 80060b8:	1809      	addeq	r1, r1, r0
 80060ba:	6021      	streq	r1, [r4, #0]
 80060bc:	e7ed      	b.n	800609a <_free_r+0x1e>
 80060be:	461a      	mov	r2, r3
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	b10b      	cbz	r3, 80060c8 <_free_r+0x4c>
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d9fa      	bls.n	80060be <_free_r+0x42>
 80060c8:	6811      	ldr	r1, [r2, #0]
 80060ca:	1850      	adds	r0, r2, r1
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d10b      	bne.n	80060e8 <_free_r+0x6c>
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	4401      	add	r1, r0
 80060d4:	1850      	adds	r0, r2, r1
 80060d6:	4283      	cmp	r3, r0
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	d1e0      	bne.n	800609e <_free_r+0x22>
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4408      	add	r0, r1
 80060e2:	6010      	str	r0, [r2, #0]
 80060e4:	6053      	str	r3, [r2, #4]
 80060e6:	e7da      	b.n	800609e <_free_r+0x22>
 80060e8:	d902      	bls.n	80060f0 <_free_r+0x74>
 80060ea:	230c      	movs	r3, #12
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	e7d6      	b.n	800609e <_free_r+0x22>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	1821      	adds	r1, r4, r0
 80060f4:	428b      	cmp	r3, r1
 80060f6:	bf01      	itttt	eq
 80060f8:	6819      	ldreq	r1, [r3, #0]
 80060fa:	685b      	ldreq	r3, [r3, #4]
 80060fc:	1809      	addeq	r1, r1, r0
 80060fe:	6021      	streq	r1, [r4, #0]
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	6054      	str	r4, [r2, #4]
 8006104:	e7cb      	b.n	800609e <_free_r+0x22>
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	2000151c 	.word	0x2000151c

0800610c <__malloc_lock>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__malloc_lock+0x8>)
 800610e:	f7ff bfa5 	b.w	800605c <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	20001518 	.word	0x20001518

08006118 <__malloc_unlock>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__malloc_unlock+0x8>)
 800611a:	f7ff bfa0 	b.w	800605e <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	20001518 	.word	0x20001518

08006124 <_init>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr

08006130 <_fini>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr
